# This file is a template, and might need editing before it works on your project.
# Auto DevOps
# This CI/CD configuration provides a standard pipeline for
# * building a Docker image (using a buildpack if necessary),
# * storing the image in the container registry,
# * running tests from a buildpack,
# * running code quality analysis,
# * and creating a review app for each topic branch, default, and stable branch.
#
# In order to deploy, you must have a Kubernetes cluster configured either
# via a project integration, or via group/project variables.
# AUTO_DEVOPS_DOMAIN must also be set as a variable at the group or project
# level, or manually added below.
#
# If you want to deploy to staging first, or enable canary deploys,
# uncomment the relevant jobs in the pipeline below.
#
# If Auto DevOps fails to detect the proper buildpack, or if you want to
# specify a custom buildpack, set a project variable `BUILDPACK_URL` to the
# repository URL of the buildpack.
# e.g. BUILDPACK_URL=https://github.com/heroku/heroku-buildpack-ruby.git#v142
# If you need multiple buildpacks, add a file to your project called
# `.buildpacks` that contains the URLs, one on each line, in order.
# Note: Auto CI does not work with multiple buildpacks yet

default:
  image: "${CI_REGISTRY}/${GITLAB_NAMESPACE}/gitlab-build-images/debian-${DEBIAN_VERSION}-ruby-${RUBY_VERSION}:gcloud-514-kubectl-1.31-helm-3.16-helm_kubeconform-0.1.17-vcluster-0.22-awscli-1.37.9-vault-1.19.0"

variables:
  AUTO_DEPLOY_TAG_REGEX: '^[0-9]+\.[0-9]+\.[0-9]+\+[a-z0-9]{7,}$'
  DOCKER_VERSION: "28.0.1"
  HELM_VERSION: "3.10.3"
  KUBECTL_VERSION: "1.28.3"
  VCLUSTER_VERSION: "default"
  STABLE_REPO_URL: "https://charts.helm.sh/stable"
  GOOGLE_APPLICATION_CREDENTIALS: ${CI_PROJECT_DIR}/.google_keyfile.json
  # AUTO_DEVOPS_DOMAIN is the application deployment domain and should be set as a variable at the group or project level.
  # AUTO_DEVOPS_DOMAIN: domain.example.com
  GIT_CLONE_PATH: $CI_BUILDS_DIR/gitlab
  HELM_MAX_HISTORY: 20
  NAMESPACE: $KUBE_NAMESPACE
  REVIEW_REF_PREFIX: ""
  ISSUE_BOT_LABELS_EXTRA: "group::Self Managed,type::maintenance,maintenance::pipelines"
  SAST_EXCLUDED_PATHS: "/doc,/examples,/spec"
  CANONICAL_PROJECT_PATH: 'gitlab-org/charts/gitlab'
  SECURITY_PROJECT_PATH: 'gitlab-org/security/charts/gitlab'
  DEV_PROJECT_PATH: 'gitlab/charts/gitlab'
  QA_FULL_SUITE_OPTIONS: '--tag ~smoke --tag ~skip_live_env --tag ~orchestrated --tag ~transient'
  QA_SANITY_SUITE_OPTIONS: '--tag smoke --tag ~skip_live_env --tag ~orchestrated'
  GITLAB_QA_ADMIN_ACCESS_TOKEN: $GITLAB_ADMIN_TOKEN
  DEBIAN_VERSION: bookworm-slim
  BUSYBOX_VERSION: "1.37"
  RUBY_VERSION: "3.3.7"
  CI_TOOLS_VERSION: "4.22.0"
  CI_TOOLS_NAMESPACE: "gitlab-org"
  GITLAB_NAMESPACE: "gitlab-org"
  GITLAB_QA_VERSION: "15.4.0"
  # STRICT_VERSIONS is used in RSpecs to ensure exact version match for tools like "helm" and "kubectl"
  STRICT_VERSIONS: "true"
  KUBE_CRD_SCHEMA_URL: "https://raw.githubusercontent.com/kubernetes/kubernetes/master/api/openapi-spec/v3/apis__apiextensions.k8s.io__v1_openapi.json"
  HELM_DEFAULT_SETTINGS: |
    certmanager-issuer:
      email: support@gitlab.com
    gitlab:
      toolbox:
        backups:
          cron:
            enabled: true
  GITLAB_AUTH_TOKEN: $DANGER_GITLAB_API_TOKEN
  REVIEW_APPS_AUTO_STOP_IN: "2 hours"
  LIMIT_TO: ""
  PARENT_PIPELINE_ID: $CI_PIPELINE_ID

  # CI Images
  DOCKERHUB_PREFIX: "docker.io" # Optionally change to dependency proxy if DockerHub rate limits become a problem.
  BUSYBOX_IMAGE: "${DOCKERHUB_PREFIX}/busybox:${BUSYBOX_VERSION}"
  RUBY_IMAGE: "${DOCKERHUB_PREFIX}/ruby:${RUBY_VERSION}-alpine"
  KUBE_SCORE_IMAGE: "${DOCKERHUB_PREFIX}/zegl/kube-score:v1.19.0@sha256:94137f32ce139dc9fbdbbd380249025e4d378c282ff151a100b981cdeeb923b6"
  DOCKER_DIND_IMAGE: "${DOCKERHUB_PREFIX}/docker:${DOCKER_VERSION}-dind"

  DOCS_LINT_IMAGE: registry.gitlab.com/gitlab-org/technical-writing/docs-gitlab-com/lint-markdown:alpine-3.21-vale-3.11.2-markdownlint2-0.17.2-lychee-0.18.1

stages:
  - prepare
  - test
  - preflight
  - approve-review-apps
  - prepare-review
  - review
  - staging
  - canary
  - specs
  - qa-manual
  - qa
  - qa-report
  - staging-release
  - package
  - release-package
  - cleanup
  - report

include:
  - local: '/.gitlab/ci/rules.gitlab-ci.yml'
  - local: '/.gitlab/ci/review-apps.gitlab-ci.yml'
    rules:
      - if: '$LIMIT_TO == "vcluster"'
  - local: '/.gitlab/ci/vcluster-review-apps.gitlab-ci.yml'
  - local: '/.gitlab/ci/environments/gkevc132.gitlab-ci.yml'
    rules:
      - if: '$LIMIT_TO == "gkevc132"'
  - local: '/.gitlab/ci/operator.gitlab-ci.yml'
    rules:
      - if: '$LIMIT_TO == "" || $LIMIT_TO == null'
  - local: '/.gitlab/ci/environments/gke130.gitlab-ci.yml'
    rules:
      - if: '$LIMIT_TO == "" || $LIMIT_TO == "gke130"'
  - local: '/.gitlab/ci/environments/gke131.gitlab-ci.yml'
    rules:
      - if: '$LIMIT_TO == "" || $LIMIT_TO == "gke131"'
  - local: '/.gitlab/ci/environments/gke131-arm.gitlab-ci.yml'
    rules:
      - if: '$LIMIT_TO == "" || $LIMIT_TO == "gke131a"'
  - local: '/.gitlab/ci/environments/gke132.gitlab-ci.yml'
    rules:
      - if: '$LIMIT_TO == "" || $LIMIT_TO == "gke132"'
  - local: '/.gitlab/ci/environments/eks132.gitlab-ci.yml'
    rules:
      - if: '$LIMIT_TO == "eks132"'
  - local: /.gitlab/ci/scanners.yml
    rules:
      - if: '$LIMIT_TO == "" || $LIMIT_TO == null'
  - local: /.gitlab/ci/validations.yml
    rules:
      - if: '$LIMIT_TO == "" || $LIMIT_TO == null'
  - local: /.gitlab/ci/checks.yml
    rules:
      - if: '$LIMIT_TO == "" || $LIMIT_TO == null'
  - local: /.gitlab/ci/review-docs.yml
    rules:
      - if: '$LIMIT_TO == "" || $LIMIT_TO == null'
  - component: ${CI_SERVER_FQDN}/gitlab-org/components/danger-review/danger-review@2.0.0
    rules:
      - if: '$LIMIT_TO != "" && $LIMIT_TO != null'
        when: never
      - if: '$CI_SERVER_HOST == "gitlab.com"'

tag_auto_deploy:
  stage: staging-release
  script:
    - ./scripts/tag_auto_deploy.rb
  rules:
    - if: '$PIPELINE_TYPE == "AUTO_DEPLOY_TRIGGER_PIPELINE"'

.source_autodevops:
  before_script:
    - source scripts/ci/autodevops.sh

.dind:
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_MIRROR: https://mirror.gcr.io
    DOCKER_OPTIONS: "--registry-mirror ${DOCKER_MIRROR}"
  services:
    - name: ${DOCKER_DIND_IMAGE}
      alias: docker
      entrypoint: [ "sh", "-c", "dockerd-entrypoint.sh $DOCKER_OPTIONS" ]

update-trigger-branch:
  stage: prepare
  allow_failure: true # Failures are expected if there are parrallel runs, and we hit git locks
  before_script: []
  variables:
    GIT_STRATEGY: none
    TRIGGER_PROJECT: "gitlab.com/gitlab-org/charts/gitlab.git"
    TRIGGER_BRANCH: "master-trigger-branch"
  script:
    - git clone "https://${GITLAB_TRIGGER_UPDATE_BOT_USERNAME}:${GITLAB_TRIGGER_UPDATE_BOT_PASSWORD}@${TRIGGER_PROJECT}" update-project
    - cd update-project
    - git checkout -B ${TRIGGER_BRANCH}
    - git reset --hard $CI_DEFAULT_BRANCH
    - git push --force-with-lease=${TRIGGER_BRANCH} origin ${TRIGGER_BRANCH} -o ci.skip
  rules:
    - if: '$PIPELINE_TYPE == "CANONICAL_DEFAULT_BRANCH_PIPELINE"'
    - if: '$TRIGGER_UPDATE'  # Allow us to manually trigger this job in a pipeline if we wish using this CI variable

pin_image_versions:
  stage: approve-review-apps
  script:
    - apt-get update -qq
    - apt install -y bats skopeo
    - bats --verbose-run ./scripts/ci/pin_image_digests.bats
    - bash ./scripts/ci/pin_image_digests.sh
  artifacts:
    paths:
      - ci.digests.yaml
  rules:
    # If we ever enable cluster tests in Dev, we have to fix the
    # pin_image_digtests.{bats|sh} to consider images built from
    # CNG in Dev
    - !reference [.rule:skip_if_not_canonical_or_security]
    - if: '$LIMIT_TO != "" && $LIMIT_TO != null && $PARENT_PIPELINE_ID != $CI_PIPELINE_ID'
      when: never
    - if: '$PIPELINE_TYPE =~ /DEFAULT_BRANCH_PIPELINE$/'
    - if: '$PIPELINE_TYPE =~ /MR_PIPELINE$/'
    - if: '$PIPELINE_TYPE =~ /STABLE_BRANCH_PIPELINE$/'
    - if: '$PIPELINE_TYPE =~ /FEATURE_BRANCH_PIPELINE$/'
    - if: '$PIPELINE_TYPE == "QA_KNAPSACK_UPDATE_PIPELINE"'

.set_up_varfile_and_kubecontext:
  script:
    - mkdir -p $(dirname "${VARIABLES_FILE}")
    - set_context
    - check_kube_domain

.set_up_namespace_secret_and_deploy:
  script:
    - ensure_namespace
    - create_secret
    - deploy
    - wait_for_deploy

.get_qa_revision:
  script:
    - kubectl wait pods -n $NAMESPACE -l app=toolbox,release=$RELEASE_NAME  --for condition=Ready --timeout=60s
    - echo "export QA_GITLAB_REVISION=`kubectl exec -i $(kubectl get pods -lrelease=$RELEASE_NAME,app=toolbox -o custom-columns=":metadata.name") -c toolbox -- cat /srv/gitlab/REVISION`" >> "${VARIABLES_FILE}"

.review_template:
  stage: review
  variables:
    HOST_SUFFIX: "$CI_ENVIRONMENT_SLUG"
    DOMAIN: "-$CI_ENVIRONMENT_SLUG.$KUBE_INGRESS_BASE_DOMAIN"
    VARIABLES_FILE: "variables/${CI_JOB_NAME}"
  retry: 1
  extends: .source_autodevops
  needs:
    - pipeline: $PARENT_PIPELINE_ID
      job: pin_image_versions
  script:
    - !reference [.set_up_varfile_and_kubecontext, script]
    - kubectl version --output=json
    - !reference [.set_up_namespace_secret_and_deploy, script]
    - check_domain_ip
    - echo "export GITLAB_URL=gitlab-$HOST_SUFFIX.$KUBE_INGRESS_BASE_DOMAIN" >> "${VARIABLES_FILE}"
    - echo "export GITLAB_ROOT_DOMAIN=$CI_ENVIRONMENT_SLUG.$KUBE_INGRESS_BASE_DOMAIN"        >> "${VARIABLES_FILE}"
    - echo "export REGISTRY_URL=registry-$HOST_SUFFIX.$KUBE_INGRESS_BASE_DOMAIN"     >> "${VARIABLES_FILE}"
    - echo "export S3_ENDPOINT=https://minio-$HOST_SUFFIX.$KUBE_INGRESS_BASE_DOMAIN" >> "${VARIABLES_FILE}"
    - !reference [.get_qa_revision, script]
  artifacts:
    when: always
    paths:
    - variables
  rules:
    - !reference [.rule:skip_if_no_cluster]
    - if: '$PIPELINE_TYPE =~ /DEFAULT_BRANCH_PIPELINE$/'
    - if: '$PIPELINE_TYPE =~ /MR_PIPELINE$/'
    - if: '$PIPELINE_TYPE =~ /STABLE_BRANCH_PIPELINE$/'
    - if: '$PIPELINE_TYPE =~ /FEATURE_BRANCH_PIPELINE$/'
    - if: '$PIPELINE_TYPE == "QA_KNAPSACK_UPDATE_PIPELINE"'

trigger_review_current:
  stage: approve-review-apps
  image: ${BUSYBOX_IMAGE}
  script:
    - echo "Testing current platform."
  needs:
    - job: danger-review
      optional: true
    - job: pin_image_versions
  rules:
    - !reference [.rule:skip_if_not_canonical_or_security]
    - if: '$PIPELINE_TYPE =~ /DOCS_PIPELINE/'
      when: never
    - if: '$CI_PIPELINE_SOURCE != "pipeline" && $CI_PIPELINE_SOURCE != "parent_pipeline" && $PIPELINE_TYPE =~ /DEFAULT_BRANCH_PIPELINE$/ '
    - if: '$CI_PIPELINE_SOURCE != "pipeline" && $CI_PIPELINE_SOURCE != "parent_pipeline" && $PIPELINE_TYPE =~ /STABLE_BRANCH_PIPELINE$/ '
    - if: '$CI_PIPELINE_SOURCE != "pipeline" && $CI_PIPELINE_SOURCE != "parent_pipeline"'
      when: manual
    # Triggered from CNG
    - if: '$CI_PIPELINE_SOURCE == "pipeline" && $TEST_BRANCH == "true"'

.trigger_review_current:
  rules:
    - !reference [.rule:skip_if_not_canonical_or_security]
    - if: '$PIPELINE_TYPE =~ /DOCS_PIPELINE/'
      when: never
    - if: '$CI_PIPELINE_SOURCE != "pipeline" && $CI_PIPELINE_SOURCE != "parent_pipeline"'
    # Triggered from CNG
    - if: '$CI_PIPELINE_SOURCE == "pipeline" && $TEST_BRANCH == "true"'


trigger_review_secondary:
  stage: approve-review-apps
  image: ${BUSYBOX_IMAGE}
  script:
    - echo "Testing secondary platforms."
  needs:
    - job: danger-review
      optional: true
    - job: pin_image_versions
  rules:
    - if: '$PIPELINE_TYPE =~ /DOCS_PIPELINE/'
      when: never
    - !reference [.rule:skip_if_not_canonical_or_security]
    - if: '$CI_PIPELINE_SOURCE != "pipeline" && $CI_PIPELINE_SOURCE != "parent_pipeline"'
      when: manual
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: manual

.trigger_review_secondary:
  rules:
    - if: '$PIPELINE_TYPE =~ /DOCS_PIPELINE/'
      when: never
    - !reference [.rule:skip_if_not_canonical_or_security]
    - if: '$CI_PIPELINE_SOURCE != "pipeline" && $CI_PIPELINE_SOURCE != "parent_pipeline"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

.trigger_review_job:
  stage: review
  trigger:
    include:
      - local: .gitlab-ci.yml
    strategy: depend
    forward:
      pipeline_variables: true
  inherit:
    variables:
      - CI_PROJECT_PATH
      - CANONICAL_PROJECT_PATH
      - SECURITY_PROJECT_PATH
      - PIPELINE_TYPE
      - REVIEW_REF_PREFIX
      - LIMIT_TO
      - DANGER_GITLAB_API_TOKEN
      - QA_ALLURE_AWS_ACCESS_KEY_ID
      - QA_ALLURE_AWS_SECRET_ACCESS_KEY
  variables:
    PARENT_PIPELINE_ID: $CI_PIPELINE_ID

trigger-gke130:
  extends: .trigger_review_job
  needs:
    - trigger_review_secondary
  variables:
    LIMIT_TO: gke130
  rules:
    - !reference [.trigger_review_secondary, rules]

trigger-gke131:
  extends: .trigger_review_job
  needs:
    - trigger_review_secondary
  variables:
    LIMIT_TO: gke131
  rules:
    - !reference [.trigger_review_secondary, rules]

trigger-gke131a:
  extends: .trigger_review_job
  needs:
    - trigger_review_current
  variables:
    LIMIT_TO: gke131a
  rules:
    - !reference [.trigger_review_current, rules]

trigger-gke132:
  extends: .trigger_review_job
  needs:
    - trigger_review_current
  variables:
    LIMIT_TO: gke132
  rules:
    - !reference [.trigger_review_current, rules]

trigger-gkevc132:
  extends: .trigger_review_job
  needs:
    - trigger_review_secondary
  variables:
    LIMIT_TO: gkevc132
  rules:
    - !reference [.trigger_review_secondary, rules]

trigger-vcluster:
  extends: .trigger_review_job
  needs:
    - trigger_review_secondary
  variables:
    LIMIT_TO: vcluster
  rules:
    - !reference [.trigger_review_secondary, rules]

trigger-eks132:
  extends: .trigger_review_job
  needs:
    - trigger_review_secondary
  variables:
    LIMIT_TO: eks132
  rules:
    - !reference [.trigger_review_secondary, rules]
# Jobs using auto_stop_in that exit with a failure will not execute the on_stop
# action. We get frequent failures during review_* jobs. Their accompanying
# partially deployed environments then hang around forever which may eventually
# cause resource exhaustion. These deployments must be  manually cleaned up. See
# https://gitlab.com/gitlab-org/charts/gitlab/-/issues/2185 for details. Issue
# https://gitlab.com/gitlab-org/gitlab/-/issues/382549 should address this
# problem in the future.
#
# To ensure that deployment cleanup always occurs, we create the environment
# using this job. It is designed to never fail and will always execute the
# on_stop action either when manually performed or when
# $REVIEW_APPS_AUTO_STOP_IN expires. The actual deployment is left to the
# associated review_* job.

.stop_review_template:
  stage: review
  variables:
    GIT_CHECKOUT: "false"
  before_script: []
  dependencies: []
  script:
    # If the branch has already been deleted, fall back to `master`.
    - git checkout "${CI_COMMIT_REF_NAME}" || git checkout master
    - source scripts/ci/autodevops.sh
    - set_context
    - delete
    - cleanup
  when: manual
  allow_failure: true
  rules:
    - !reference [.review_template, rules]

# ---------------------------------------------------------------------------

.specs:
  image: "${CI_REGISTRY}/${GITLAB_NAMESPACE}/gitlab-build-images/ci/debian-${DEBIAN_VERSION}-ruby-${RUBY_VERSION}-golang-${GO_VERSION}-node-20.12-postgresql-${PG_VERSION}:rubygems-${RUBYGEMS_VERSION}-git-2.49-lfs-2.9-chrome-${CHROME_VERSION}-yarn-1.22-graphicsmagick-1.3.36"
  stage: specs
  extends:
    - .source_autodevops
    - .dind
  variables:
    GITLAB_PASSWORD: $ROOT_PASSWORD
    S3_CONFIG_PATH: /etc/gitlab/minio
    RUBYGEMS_VERSION: "3.6"
    GO_VERSION: "1.24"
    PG_VERSION: "16"
    CHROME_VERSION: "123"
  script:
    - ./scripts/ci/install_spec_dependencies.sh
    - set_context
    - ./scripts/ci/run_specs.sh
  artifacts:
    when: on_failure
    expire_in: 7d
    paths:
    - tmp/capybara
  cache:
    key: "debian-${DEBIAN_VERSION}-ruby-${RUBY_VERSION}-${CI_JOB_NAME}"
    paths:
    - gems
  rules:
    - if: '$PIPELINE_TYPE =~ /DEFAULT_BRANCH_PIPELINE$/'
    - if: '$PIPELINE_TYPE =~ /MR_PIPELINE$/'
    - if: '$PIPELINE_TYPE =~ /STABLE_BRANCH_PIPELINE$/'
    - if: '$PIPELINE_TYPE =~ /FEATURE_BRANCH_PIPELINE$/'
    - if: '$PIPELINE_TYPE == "QA_KNAPSACK_UPDATE_PIPELINE"'

.qa:
  image: "${CI_REGISTRY}/${CI_TOOLS_NAMESPACE}/gitlab-omnibus-builder/distribution_ci_tools:${CI_TOOLS_VERSION}"
  stage: qa
  extends: .dind
  variables:
    QA_GENERATE_ALLURE_REPORT: "true"
    QA_ARTIFACTS_DIR: $CI_PROJECT_DIR
    QA_CAN_TEST_PRAEFECT: "false"
  script:
    - source scripts/ci/qa.sh
    - qa_export_passwords
    - docker login -u gitlab-ci-token -p "$CI_JOB_TOKEN" "$CI_REGISTRY"
    - gem install gitlab-qa -v "${GITLAB_QA_VERSION}"
    - source "${VARIABLES_FILE}"
    - if [ -n "$QA_GITLAB_REVISION" ]; then
    -   QA_IMAGE="registry.gitlab.com/gitlab-org/gitlab/gitlab-ee-qa:$QA_GITLAB_REVISION"
    - else
    -   QA_IMAGE="gitlab/gitlab-ee-qa:nightly" # this will default to use nightly https://gitlab.com/gitlab-org/gitlab-qa/-/blob/master/docs/what_tests_can_be_run.md#specifying-the-gitlab-version
    - fi;
    - echo "Running - 'gitlab-qa Test::Instance::Any --qa-image $QA_IMAGE EE https://$GITLAB_URL -- $TEST_SUITE'"
    - |
      SIGNUP_DISABLED=true \
      QA_DEBUG=true \
      GITLAB_USERNAME=root \
      GITLAB_PASSWORD=$ROOT_PASSWORD \
      GITLAB_ADMIN_USERNAME=root \
      GITLAB_ADMIN_PASSWORD=$ROOT_PASSWORD \
      gitlab-qa Test::Instance::Any --qa-image $QA_IMAGE EE https://$GITLAB_URL -- $TEST_SUITE
  artifacts:
    when: always
    expire_in: 7d
    paths:
    - ./gitlab-qa-run-*
  retry: 1
  allow_failure: true

wait_for_dev_images:
  timeout: 2h
  image: "${CI_REGISTRY}/${CI_TOOLS_NAMESPACE}/gitlab-omnibus-builder/distribution_ci_tools:${CI_TOOLS_VERSION}"
  stage: prepare
  before_script: []
  variables:
    CNG_REGISTRY: dev.gitlab.org:5005/gitlab/charts/components/images
  script:
    - bash scripts/wait_for_images.sh
  artifacts:
    when: always
    expire_in: 7d
    paths:
      - ./*.json
      - skopeo_inspect_error.log
  rules:
    - if: '$PIPELINE_TYPE == "BUILD_STABLE_BRANCH_PIPELINE"'

.publish_chart_package:
  # publish chart into repo's Packages
  stage: package
  dependencies: []
  variables:
    # **Required** variable to set channel to which chart will be published:
    # CHANNEL: "unstable"
    VERSION_SUFFIX: ""
  script:
    - helm dependency update
    - EXTRACTED_VERSION=$(awk '/^version/ {print $2}' Chart.yaml)
    - VERSION=${VERSION:-${EXTRACTED_VERSION}}
    - echo "Packaging ${VERSION}${VERSION_SUFFIX} for ${CHANNEL}"
    - helm package --version=${VERSION}${VERSION_SUFFIX} .
    - chart_file=$(ls -l gitlab*.tgz | head -n 1 | awk '{print $NF}')
    - curl --request POST --user gitlab-ci-token:$CI_JOB_TOKEN --form "chart=@${chart_file}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/api/${CHANNEL}/charts"
    - |
      if [[ $CHANNEL =~ "devel" ]]; then
        ./scripts/helm_push_oci.sh "${chart_file}"
      fi

publish_tagged_package:
  extends: .publish_chart_package
  variables:
    CHANNEL: "stable"
  rules:
    - if: '$PIPELINE_TYPE == "RELEASE_PIPELINE"'

publish_audodeploy_package:
  extends: .publish_chart_package
  variables:
    CHANNEL: "autodeploy"
  rules:
    - if: '$PIPELINE_TYPE == "AUTO_DEPLOY_PIPELINE"'

publish_devel_package:
  extends: .publish_chart_package
  variables:
    CHANNEL: "devel"
    VERSION_SUFFIX: "-${CI_PIPELINE_ID}"
  id_tokens:
    VAULT_ID_TOKEN:
      aud: https://vault.gitlab.net

  rules:
    - if: '$PIPELINE_TYPE =~ /DEFAULT_BRANCH_PIPELINE$/'

release_package:
  stage: release-package
  timeout: 2h
  image: "${CI_REGISTRY}/${CI_TOOLS_NAMESPACE}/gitlab-omnibus-builder/distribution_ci_tools:${CI_TOOLS_VERSION}"
  script:
    - |
      if [[ $CI_COMMIT_REF_NAME =~ $AUTO_DEPLOY_TAG_REGEX ]]; then
        UNSTABLE="true"
      else
        UNSTABLE="false"
      fi
    - bash scripts/wait_for_images.sh
    # trigger pipeline for https://gitlab.com/charts/charts.gitlab.io
    - curl -fS --request POST --form "token=${COM_CHARTS_TRIGGER_TOKEN}" --form ref=master
        --form "variables[CHART_NAME]=$CI_PROJECT_NAME"
        --form "variables[RELEASE_REF]=$CI_COMMIT_REF_NAME"
        --form "variables[UNSTABLE]=$UNSTABLE"
        https://gitlab.com/api/v4/projects/2860651/trigger/pipeline
  artifacts:
    when: always
    expire_in: 7d
    paths:
      - ./*.json
      - skopeo_inspect_error.log
  rules:
    - if: '$PIPELINE_TYPE == "RELEASE_PIPELINE"'
      when: manual

.qa_branch:
  extends:
    - .qa
  parallel: 5
  rules:
    - !reference [.rule:skip_if_no_cluster]
    - if: '$PIPELINE_TYPE =~ /DEFAULT_BRANCH_PIPELINE$/'
    - if: '$PIPELINE_TYPE =~ /MR_PIPELINE$/'
    - if: '$PIPELINE_TYPE =~ /STABLE_BRANCH_PIPELINE$/'
    - if: '$PIPELINE_TYPE =~ /FEATURE_BRANCH_PIPELINE$/'
    - if: '$PIPELINE_TYPE == "QA_KNAPSACK_UPDATE_PIPELINE"'

# QA jobs for Smoke E2E suites

# QA jobs for Full E2E suites

.qa_full_suite_manual_trigger:
  image: ${BUSYBOX_IMAGE}
  stage: qa-manual
  when: manual
  artifacts:
    paths:
    - variables

knapsack-qa-report:
  image:
    name: registry.gitlab.com/gitlab-org/gitlab/gitlab-ee-qa:master
    entrypoint: [""]
  before_script:
    - cd /home/gitlab/qa
  allow_failure: true
  stage: report
  variables:
    # knapsack report upload uses gitlab-qa image with code already there
    GIT_STRATEGY: none
    QA_KNAPSACK_REPORT_FILE_PATTERN: $CI_PROJECT_DIR/gitlab-qa-run-*/gitlab-*-qa-*/knapsack/*/*.json
  script:
    - bundle exec rake "knapsack:upload[$QA_KNAPSACK_REPORT_FILE_PATTERN]"
  rules:
    - if: '$PIPELINE_TYPE == "QA_KNAPSACK_UPDATE_PIPELINE"'

issue-bot:
  stage: report
  image: "${CI_REGISTRY}/${GITLAB_NAMESPACE}/distribution/issue-bot:latest"
  script: /issue-bot
  rules:
    - if: '$PIPELINE_TYPE =~ /DEFAULT_BRANCH_PIPELINE$/'
      when: on_failure
    - if: '$PIPELINE_TYPE =~ /STABLE_BRANCH_PIPELINE$/'
      when: on_failure
    - if: '$PIPELINE_TYPE =~ /RELEASE_PIPELINE$/'
      when: on_failure