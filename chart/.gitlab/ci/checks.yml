
rubocop:
  image: ${RUBY_IMAGE}
  stage: prepare
  dependencies: []
  before_script:
    - apk add make gcc libc-dev
  script:
    - bundle config set --local path 'gems'
    - bundle config set --local frozen 'true'
    - bundle install -j $(nproc)
    - bundle exec rubocop --parallel
  cache:
    key: "debian-${DEBIAN_VERSION}-ruby-${RUBY_VERSION}-${CI_JOB_NAME}"
    paths:
    - gems
  rules:
    - if: '$PIPELINE_TYPE =~ /MR_PIPELINE$/'
    - if: '$PIPELINE_TYPE =~ /BRANCH_PIPELINE$/'
    - if: '$PIPELINE_TYPE =~ /DOCS_PIPELINE/'

# Perform content linting on documentation Markdown files
check_docs_content:
  image: ${DOCS_LINT_IMAGE}
  stage: prepare
  cache: {}
  dependencies: []
  before_script: []
  script:
    # Lint prose
    - vale --minAlertLevel error doc
  rules:
    - !reference [.rule:skip_if_dev]
    - if: '$PIPELINE_TYPE =~ /DOCS_PIPELINE/'
    - if: '$PIPELINE_TYPE =~ /MR_PIPELINE$/'
    - if: '$PIPELINE_TYPE =~ /BRANCH_PIPELINE$/'

# Perform content linting on i18n documentation Markdown files
check_docs_i18n_content:
  image: ${DOCS_LINT_IMAGE}
  stage: prepare
  cache: {}
  dependencies: []
  before_script: []
  script:
    # Lint prose
    - vale --minAlertLevel error --filter='.Name matches "gitlab_docs"' doc-locale
  rules:
    - !reference [.rule:skip_if_dev]
    - if: '$PIPELINE_TYPE == "DOCS_PIPELINE_LOCALIZATION"'

# Perform linting on documentation Markdown files
check_docs_markdown:
  image: ${DOCS_LINT_IMAGE}
  stage: prepare
  cache: {}
  dependencies: []
  before_script: []
  script:
    # Lint Markdown
    - markdownlint-cli2 'doc/**/*.md'
  rules:
    - !reference [.rule:skip_if_dev]
    - if: '$PIPELINE_TYPE =~ /DOCS_PIPELINE/'
    - if: '$PIPELINE_TYPE =~ /MR_PIPELINE$/'
    - if: '$PIPELINE_TYPE =~ /BRANCH_PIPELINE$/'

# Perform linting on i18n documentation Markdown files
check_docs_i18n_markdown:
  image: ${DOCS_LINT_IMAGE}
  stage: prepare
  cache: {}
  dependencies: []
  before_script: []
  script:
    # Lint Markdown
    - cd doc-locale && markdownlint-cli2 --config .markdownlint/.markdownlint-cli2.yaml '**/*.md'
  rules:
    - !reference [.rule:skip_if_dev]
    - if: '$PIPELINE_TYPE == "DOCS_PIPELINE_LOCALIZATION"'

# Perform link checking on documentation Markdown files
check_docs_links:
  image: ${DOCS_LINT_IMAGE}
  stage: prepare
  cache: {}
  dependencies: []
  before_script: []
  script:
    # Check Markdown links
    - lychee --offline --include-fragments doc
  rules:
    - !reference [.rule:skip_if_dev]
    - if: '$PIPELINE_TYPE =~ /DOCS_PIPELINE/'
    - if: '$PIPELINE_TYPE =~ /MR_PIPELINE$/'
    - if: '$PIPELINE_TYPE =~ /BRANCH_PIPELINE$/'
  
# Verify localized documentation files have corresponding English versions
docs-i18n-lint paths:
  image: ${DOCS_LINT_IMAGE}
  stage: prepare
  cache: {}
  dependencies: []
  before_script: []
  script:
    - scripts/docs_i18n_verify_paths
  rules:
    - !reference [.rule:skip_if_dev]
    - if: '$PIPELINE_TYPE =~ /DOCS_PIPELINE/'
    - if: '$PIPELINE_TYPE =~ /MR_PIPELINE$/'
    - if: '$PIPELINE_TYPE =~ /BRANCH_PIPELINE$/'

docs-test hugo:
  image: registry.gitlab.com/gitlab-org/technical-writing/docs-gitlab-com/docs-gitlab-com-builder:hugo-0.148.2
  stage: prepare
  variables:
    DOCS_BRANCH: "main"
  before_script:
    # Check if the job is running against a stable branch. If running against a stable branch, check out the
    # corresponding version of the GitLab Docs project instead of using the 'main' branch.
    - |
      if [[ $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ [0-9]+-[0-9]+-stable ]]; then
        MAJOR=$(echo "$CI_MERGE_REQUEST_TARGET_BRANCH_NAME" | cut -d '-' -f 1)
        MINOR=$(echo "$CI_MERGE_REQUEST_TARGET_BRANCH_NAME" | cut -d '-' -f 2)
        # Convert GitLab chart style (8-9-stable-ee) to Docs style (17.9)
        MAJOR=$((MAJOR+9))
        DOCS_BRANCH=$MAJOR.$MINOR
        echo "Using docs-gitlab-com branch $DOCS_BRANCH instead of main"
      fi
    # Clone the GitLab Docs project
    - git clone --depth 1 --filter=tree:0 --branch $DOCS_BRANCH https://gitlab.com/gitlab-org/technical-writing/docs-gitlab-com.git
    - cd docs-gitlab-com
    - make add-latest-icons
  script:
    # Test that full i18n Hugo will build
    - hugo --gc --printPathWarnings --panicOnWarning --environment test
    # Test for invalid index pages
    # See https://gitlab.com/gitlab-org/technical-writing/docs-gitlab-com/-/blob/main/scripts/check-index-filenames.sh
    - make check-index-pages SEARCH_DIR="../doc"
    - make check-index-pages SEARCH_DIR="../doc-locale"
  rules:
    - !reference [.rule:skip_if_fork]
    - if: '$PIPELINE_TYPE =~ /DOCS_PIPELINE/'
    - if: '$PIPELINE_TYPE =~ /MR_PIPELINE$/'
    - if: '$PIPELINE_TYPE =~ /BRANCH_PIPELINE$/'

# https://github.com/zegl/kube-score
# Initially motivated to detect duplicated environment variable definitions
kube-score:
  image:
    name: ${KUBE_SCORE_IMAGE}
    entrypoint: [""]
  stage: prepare
  script:
    - bash ./scripts/ci/add_dependency_repos.sh
    - helm dependency build
    - helm template . --set certmanager-issuer.email=gitlab@example.com  > /tmp/test.yaml
    - /kube-score score --ignore-container-cpu-limit --ignore-container-memory-limit --ignore-test "container-image-pull-policy,container-security-context-user-group-id,container-ephemeral-storage-request-and-limit,container-security-context-readonlyrootfilesystem,pod-probes,pod-networkpolicy,container-resources,deployment-has-poddisruptionbudget,deployment-replicas,deployment-has-host-podantiaffinity" /tmp/test.yaml
  rules:
    - if: '$PIPELINE_TYPE =~ /DOCS_PIPELINE/'
    - if: '$PIPELINE_TYPE =~ /MR_PIPELINE$/'
    - if: '$PIPELINE_TYPE =~ /BRANCH_PIPELINE$/'

lint_package:
  stage: preflight
  when: always
  script:
    - kubectl version --client=true --output=json
    - helm version --template='Helm Version - {{.Version}}'
    - helm repo add gitlab https://charts.gitlab.io
    - helm repo add jetstack https://charts.jetstack.io
    - helm dependency update
    - echo "$HELM_DEFAULT_SETTINGS" | tee ./template_settings.yaml
    - echo "$HELM_SETTINGS" | tee -a ./template_settings.yaml
    - helm lint -f ./template_settings.yaml
    - mkdir -p build
    - helm package -d build .
  artifacts:
    expire_in: 3d
    paths:
    - build
  rules:
    - if: '$PIPELINE_TYPE =~ /_MR_PIPELINE$/'
    - if: '$PIPELINE_TYPE =~ /_BRANCH_PIPELINE$/'
    - if: '$PIPELINE_TYPE == "NIGHTLY_PIPELINE"'
    - if: '$PIPELINE_TYPE == "AUTO_DEPLOY_PIPELINE"'
    - if: '$PIPELINE_TYPE == "RELEASE_PIPELINE"'

specs_without_cluster:
  extends: .specs
  variables:
    RSPEC_TAGS: ~type:feature
  parallel: 9
  rules:
    - !reference [.specs, rules]
    - if: '$PIPELINE_TYPE == "AUTO_DEPLOY_PIPELINE"'
    - if: '$PIPELINE_TYPE == "RELEASE_PIPELINE"'
  needs: ['lint_package']
