---
# Source: gitlab/charts/gitlab/charts/gitaly/templates/pdb.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: gitlab-gitaly
  namespace: gitlab
  labels:
    app: gitaly
    chart: gitaly-3.2.2
    release: gitlab
    heritage: Helm
    
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: gitaly
      release: gitlab
---
# Source: gitlab/charts/gitlab/charts/sidekiq/templates/pdb.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: gitlab-sidekiq
  namespace: gitlab
  labels:
    app: sidekiq
    chart: sidekiq-3.2.2
    release: gitlab
    heritage: Helm
    
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: sidekiq
      release: gitlab
---
# Source: gitlab/charts/gitlab/charts/unicorn/templates/pdb.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: gitlab-unicorn
  namespace: gitlab
  labels:
    app: unicorn
    chart: unicorn-3.2.2
    release: gitlab
    heritage: Helm
    
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: unicorn
      release: gitlab
---
# Source: gitlab/charts/minio/templates/pdb.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: gitlab-minio-v1
  namespace: gitlab
  labels:
    app: minio
    chart: minio-0.4.3
    release: gitlab
    heritage: Helm
    
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: minio
      release: gitlab
      component: app
---
# Source: gitlab/charts/gitlab-runner/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-gitlab-runner
  labels:
    app: gitlab-gitlab-runner
    chart: gitlab-runner-0.15.0
    release: "gitlab"
    heritage: "Helm"
data:
  entrypoint: |
    #!/bin/bash
    set -e
    mkdir -p /home/gitlab-runner/.gitlab-runner/
    cp /scripts/config.toml /home/gitlab-runner/.gitlab-runner/

    # Register the runner
    if [[ -f /secrets/accesskey && -f /secrets/secretkey ]]; then
      export CACHE_S3_ACCESS_KEY=$(cat /secrets/accesskey)
      export CACHE_S3_SECRET_KEY=$(cat /secrets/secretkey)
    fi

    if [[ -f /secrets/gcs-applicaton-credentials-file ]]; then
      export GOOGLE_APPLICATION_CREDENTIALS="/secrets/gcs-applicaton-credentials-file"
    else
      if [[ -f /secrets/gcs-access-id && -f /secrets/gcs-private-key ]]; then
        export CACHE_GCS_ACCESS_ID=$(cat /secrets/gcs-access-id)
        # echo -e used to make private key multiline (in google json auth key private key is oneline with \n)
        export CACHE_GCS_PRIVATE_KEY=$(echo -e $(cat /secrets/gcs-private-key))
      fi
    fi

    if [[ -f /secrets/runner-registration-token ]]; then
      export REGISTRATION_TOKEN=$(cat /secrets/runner-registration-token)
    fi

    if [[ -f /secrets/runner-token ]]; then
      export CI_SERVER_TOKEN=$(cat /secrets/runner-token)
    fi

    if ! sh /scripts/register-the-runner; then
      exit 1
    fi

    # Start the runner
    exec /entrypoint run --user=gitlab-runner \
      --working-directory=/home/gitlab-runner

  config.toml: |
    concurrent = 10
    check_interval = 30
    log_level = "info"
    listen_address = '[::]:9252'
  configure: |
    set -e
    cp /init-secrets/* /secrets
  register-the-runner: |
    #!/bin/bash
    MAX_REGISTER_ATTEMPTS=30

    for i in $(seq 1 "${MAX_REGISTER_ATTEMPTS}"); do
      echo "Registration attempt ${i} of ${MAX_REGISTER_ATTEMPTS}"
      /entrypoint register \
        --non-interactive

      retval=$?

      if [ ${retval} = 0 ]; then
        break
      elif [ ${i} = ${MAX_REGISTER_ATTEMPTS} ]; then
        exit 1
      fi

      sleep 5 
    done

    exit 0

  check-live: |
    #!/bin/bash
    if /usr/bin/pgrep -f .*register-the-runner; then
      exit 0
    elif /usr/bin/pgrep gitlab.*runner; then
      exit 0
    else
      exit 1
    fi
---
# Source: gitlab/charts/gitlab/charts/gitaly/templates/configmap.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-gitaly
  namespace: gitlab
  labels:
    app: gitaly
    chart: gitaly-3.2.2
    release: gitlab
    heritage: Helm
    
data:
  configure: |
    set -e
    mkdir -p /init-secrets/gitaly /init-secrets/shell
    cp -v -r -L /init-config/.gitlab_shell_secret  /init-secrets/shell/.gitlab_shell_secret
    cp -v -r -L /init-config/gitaly_token  /init-secrets/gitaly/gitaly_token
    mkdir -p /init-secrets/redis
    cp -v -r -L /init-config/redis_password  /init-secrets/redis/redis_password
  config.toml.erb: |
    # The directory where Gitaly's executables are stored
    bin_dir = "/usr/local/bin"

    # listen on a TCP socket. This is insecure (no authentication)
    listen_addr = "0.0.0.0:8075"

    # Directory where internal sockets reside
    internal_socket_dir = "/home/git"

    # If metrics collection is enabled, inform gitaly about that
    prometheus_listen_addr = "localhost:9236"

    <% @storages = [ "default", ] %>
    <% @index=`echo ${HOSTNAME##*-}`.to_i %>
    <% if @storages.length > @index %>
    [[storage]]
    name = "<%= @storages[@index] %>"
    path = "/home/git/repositories"
    <% else %>
    <% raise Exception, "Storage for node #{@index} is not present in the storageNames array. Did you use kubectl to scale up ? You need to solely use helm for this purpose" %>
    <% end %>

    [logging]
    format = "json"
    dir = "/var/log/gitaly"

    [auth]
    token = "<%= File.read('/etc/gitlab-secrets/gitaly/gitaly_token').strip.dump[1..-2] %>"

    [git]

    [gitaly-ruby]
    # The directory where gitaly-ruby is installed
    dir = "/srv/gitaly-ruby"
    rugged_git_config_search_path = "/usr/local/etc"

    [gitlab-shell]
    # The directory where gitlab-shell is installed
    dir = "/srv/gitlab-shell"

  shell-config.yml.erb: |
    # GitLab user. git by default
    user: git

    # Url to gitlab instance. Used for api calls. Should end with a slash.
    gitlab_url: "http://gitlab-unicorn:8181/"

    secret_file: /etc/gitlab-secrets/shell/.gitlab_shell_secret

    http_settings:
      self_signed_cert: false

    # File used as authorized_keys for gitlab user
    auth_file: "/home/git/.ssh/authorized_keys"

    # Redis settings used for pushing commit notices to gitlab
    redis:
      host: gitlab-redis-master
      port: 6379
      pass: "<%= File.read("/etc/gitlab-secrets/redis/redis_password").strip.dump[1..-2] %>"
      database: nil
      namespace: resque:gitlab

    # Audit usernames.
    # Set to true to see real usernames in the logs instead of key ids, which is easier to follow, but
    # incurs an extra API call on every gitlab-shell command.
    audit_usernames: false
# Leave this here - This line denotes end of block to the parser.
---
# Source: gitlab/charts/gitlab/charts/gitlab-exporter/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-gitlab-exporter
  namespace: gitlab
  labels:
    app: gitlab-exporter
    chart: gitlab-exporter-3.2.2
    release: gitlab
    heritage: Helm
    
data:
  gitlab-exporter.yml.erb: |
    server:
      listen_address: 0.0.0.0
      listen_port: 9168

    probes:
      db_common: &db_common
        methods:
          - probe_db
        opts:
          connection_string: dbname=gitlabhq_production user=gitlab host=gitlab-postgresql port=5432 password='<%= File.read("/etc/gitlab/postgres/psql-password").strip.gsub(/[\'\\]/) { |esc| '\\' + esc } %>'
      database:
        multiple: true
        ci_builds:
          class_name: Database::CiBuildsProber
          <<: *db_common
        tuple_stats:
          class_name: Database::TuplesProber
          <<: *db_common
        rows_count:
          class_name: Database::RowCountProber
          <<: *db_common

      sidekiq: &sidekiq
        methods:
          - probe_queues
          - probe_workers
          - probe_retries
          - probe_stats
        opts:
          redis_url: redis://:<%= URI.escape(File.read("/etc/gitlab/redis/password").strip) %>@gitlab-redis-master:6379
          redis_enable_client: false

      metrics:
        multiple: true
        sidekiq:
          <<: *sidekiq
        ci_builds:
          class_name: Database::CiBuildsProber
          <<: *db_common
        tuple_stats:
          class_name: Database::TuplesProber
          <<: *db_common
        rows_count:
          class_name: Database::RowCountProber
          <<: *db_common

  configure: |
    set -e
    config_dir="/init-config"
    secret_dir="/init-secrets"
    
    for secret in postgres ; do
      mkdir -p "${secret_dir}/${secret}"
      cp -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
    done
    for secret in redis ; do
      if [ -e "${config_dir}/${secret}" ]; then
        mkdir -p "${secret_dir}/${secret}"
        cp -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
      fi
    done
    
# Leave this here - This line denotes end of block to the parser.
---
# Source: gitlab/charts/gitlab/charts/migrations/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-migrations
  namespace: gitlab
  labels:
    app: migrations
    chart: migrations-3.2.2
    release: gitlab
    heritage: Helm
    
data:
  database.yml.erb: |
    production:
      adapter: postgresql
      encoding: unicode
      database: gitlabhq_production
      username: gitlab
      password: "<%= File.read("/etc/gitlab/postgres/psql-password").strip.dump[1..-2] %>"
      host: "gitlab-postgresql"
      port: 5432
      pool: 10
      prepared_statements: false
      # load_balancing:
      #   hosts:
      #     - host1.example.com
      #     - host2.example.com      
  resque.yml.erb: |
    production:
      # Redis (single instance)
      url: redis://:<%= URI.escape(File.read("/etc/gitlab/redis/password").strip) %>@gitlab-redis-master:6379
      id:
  gitlab.yml.erb: |
    production: &base
      gitlab:
        host: gitlab.dev-gitlab2.fences-bootstrap.p1.dev
      gitaly:
        client_path: /home/git/gitaly/bin
        token: "<%= File.read('/etc/gitlab/gitaly/gitaly_token').strip.dump[1..-2] %>"
      repositories:
        storages: # You must have at least a `default` storage path.
          default:
            path: /var/opt/gitlab/repo
            gitaly_address: tcp://gitlab-gitaly-0.gitlab-gitaly.gitlab:8075
          
      
  configure: |
    set -e
    config_dir="/init-config"
    secret_dir="/init-secrets"
    
    for secret in postgres rails-secrets migrations gitaly ; do
      mkdir -p "${secret_dir}/${secret}"
      cp -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
    done
    for secret in redis minio objectstorage ldap omniauth smtp ; do
      if [ -e "${config_dir}/${secret}" ]; then
        mkdir -p "${secret_dir}/${secret}"
        cp -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
      fi
    done
    
    
    
# Leave this here - This line denotes end of block to the parser.
---
# Source: gitlab/charts/gitlab/charts/sidekiq/templates/configmap-queue.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-sidekiq-all-in-1
  namespace: gitlab
  labels:
    app: sidekiq
    chart: sidekiq-3.2.2
    release: gitlab
    heritage: Helm
    
    queue_pod_name: all-in-1
data:
  sidekiq_queues.yml.erb: |
    <%=
       # this works because codebase default content has only `:
       sq = YAML.load_file('/srv/gitlab/config/sidekiq_queues.yml')
       
       sq.to_yaml
    %>
    :concurrency: 25
# Leave this here - This line denotes end of block to the parser.
---
# Source: gitlab/charts/gitlab/charts/sidekiq/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-sidekiq
  namespace: gitlab
  labels:
    app: sidekiq
    chart: sidekiq-3.2.2
    release: gitlab
    heritage: Helm
    
data:
  installation_type: |
    gitlab-helm-chart
  database.yml.erb: |
    production:
      adapter: postgresql
      encoding: unicode
      database: gitlabhq_production
      username: gitlab
      password: "<%= File.read("/etc/gitlab/postgres/psql-password").strip.dump[1..-2] %>"
      host: "gitlab-postgresql"
      port: 5432
      pool: 10
      prepared_statements: false
      # load_balancing:
      #   hosts:
      #     - host1.example.com
      #     - host2.example.com
      
  smtp_settings.rb: |
    
  resque.yml.erb: |
    production:
      # Redis (single instance)
      url: redis://:<%= URI.escape(File.read("/etc/gitlab/redis/password").strip) %>@gitlab-redis-master:6379
      id:
  gitlab.yml.erb: |
    production: &base
      gitlab:
        host: gitlab.dev-gitlab2.fences-bootstrap.p1.dev
        https: true
        max_request_duration_seconds: 57
        impersonation_enabled: 
        usage_ping_enabled: true
        default_can_create_group: true
        username_changing_enabled: true
        issue_closing_pattern: 
        default_theme: 
        default_projects_features:
          issues: true
          merge_requests: true
          wiki: true
          snippets: true
          builds: true
          container_registry: true
        webhook_timeout: 
        trusted_proxies:
        time_zone: "UTC"        
        email_from: "gitlab@gitlab.dev-gitlab2.fences-bootstrap.p1.dev"
        email_display_name: "GitLab"
        email_reply_to: "noreply@gitlab.dev-gitlab2.fences-bootstrap.p1.dev"
        email_subject_suffix: ""
      gravatar:
        plain_url: 
        ssl_url: 
      
      extra:
        
        
        
      artifacts:
        enabled: true
        object_store:
          enabled: true
          remote_directory: gitlab-artifacts
          direct_upload: true
          background_upload: false
          proxy_download: true
          connection:
            provider: AWS
            region: us-east-1
            aws_access_key_id: "<%= File.read('/etc/gitlab/minio/accesskey').strip.dump[1..-2] %>"
            aws_secret_access_key: "<%= File.read('/etc/gitlab/minio/secretkey').strip.dump[1..-2] %>"
            host: minio.gitlab.dev-gitlab2.fences-bootstrap.p1.dev
            endpoint: http://gitlab-minio-svc:9000
            path_style: true
      lfs:
        enabled: true
        object_store:
          enabled: true
          remote_directory: git-lfs
          direct_upload: true
          background_upload: false
          proxy_download: true
          connection:
            provider: AWS
            region: us-east-1
            aws_access_key_id: "<%= File.read('/etc/gitlab/minio/accesskey').strip.dump[1..-2] %>"
            aws_secret_access_key: "<%= File.read('/etc/gitlab/minio/secretkey').strip.dump[1..-2] %>"
            host: minio.gitlab.dev-gitlab2.fences-bootstrap.p1.dev
            endpoint: http://gitlab-minio-svc:9000
            path_style: true
      uploads:
        enabled: true
        object_store:
          enabled: true
          remote_directory: gitlab-uploads
          direct_upload: true
          background_upload: false
          proxy_download: true
          connection:
            provider: AWS
            region: us-east-1
            aws_access_key_id: "<%= File.read('/etc/gitlab/minio/accesskey').strip.dump[1..-2] %>"
            aws_secret_access_key: "<%= File.read('/etc/gitlab/minio/secretkey').strip.dump[1..-2] %>"
            host: minio.gitlab.dev-gitlab2.fences-bootstrap.p1.dev
            endpoint: http://gitlab-minio-svc:9000
            path_style: true
      packages:
        enabled: true
        object_store:
          enabled: true
          remote_directory: gitlab-packages
          direct_upload: true
          background_upload: false
          proxy_download: true
          connection:
            provider: AWS
            region: us-east-1
            aws_access_key_id: "<%= File.read('/etc/gitlab/minio/accesskey').strip.dump[1..-2] %>"
            aws_secret_access_key: "<%= File.read('/etc/gitlab/minio/secretkey').strip.dump[1..-2] %>"
            host: minio.gitlab.dev-gitlab2.fences-bootstrap.p1.dev
            endpoint: http://gitlab-minio-svc:9000
            path_style: true
      external_diffs:
        enabled: 
        when: 
        object_store:
          enabled: false
          remote_directory: gitlab-mr-diffs
          direct_upload: true
          background_upload: false
          proxy_download: true
          connection:
            provider: AWS
            region: us-east-1
            aws_access_key_id: "<%= File.read('/etc/gitlab/minio/accesskey').strip.dump[1..-2] %>"
            aws_secret_access_key: "<%= File.read('/etc/gitlab/minio/secretkey').strip.dump[1..-2] %>"
            host: minio.gitlab.dev-gitlab2.fences-bootstrap.p1.dev
            endpoint: http://gitlab-minio-svc:9000
            path_style: true
      pseudonymizer:
        manifest: config/pseudonymizer.yml
        upload:
          remote_directory: gitlab-pseudo
          connection:
            provider: AWS
            region: us-east-1
            aws_access_key_id: "<%= File.read('/etc/gitlab/minio/accesskey').strip.dump[1..-2] %>"
            aws_secret_access_key: "<%= File.read('/etc/gitlab/minio/secretkey').strip.dump[1..-2] %>"
            host: minio.gitlab.dev-gitlab2.fences-bootstrap.p1.dev
            endpoint: http://gitlab-minio-svc:9000
            path_style: true
      
      pages:
        enabled: false
      mattermost:
        enabled: false
      ## Registry Integration
      registry:
        enabled: true
        host: registry.gitlab.dev-gitlab2.fences-bootstrap.p1.dev
        api_url: http://gitlab-registry:5000
        key: /etc/gitlab/registry/gitlab-registry.key
        issuer: gitlab-issuer
      gitlab_ci:
      ldap:
        enabled: false
      
      omniauth:
        enabled: false
        sync_profile_from_provider: []
        sync_profile_attributes: ["email"]
        allow_single_sign_on: ["saml"]
        block_auto_created_users: true
        auto_link_ldap_user: false
        auto_link_saml_user: false
        external_providers: []
      kerberos:
        enabled: false
      shared:
      gitaly:
        client_path: /home/git/gitaly/bin
        token: "<%= File.read('/etc/gitlab/gitaly/gitaly_token').strip.dump[1..-2] %>"
      repositories:
        storages: # You must have at least a `default` storage path.
          default:
            path: /var/opt/gitlab/repo
            gitaly_address: tcp://gitlab-gitaly-0.gitlab-gitaly.gitlab:8075
          
      backup:
        path: "tmp/backups"   # Relative paths are relative to Rails.root (default: tmp/backups/)
      gitlab_shell:
        path: /home/git/gitlab-shell/
        hooks_path: /home/git/gitlab-shell/hooks/
        upload_pack: true
        receive_pack: true
      workhorse:
      git:
        bin_path: /usr/bin/git
      webpack:
      monitoring:
        ip_whitelist:
          - 127.0.0.0/8
        sidekiq_exporter:
          enabled: true
          address: 0.0.0.0
          port: 3807
      sidekiq:
        log_format: default
  configure: |
    set -e
    config_dir="/init-config"
    secret_dir="/init-secrets"
    
    for secret in gitaly registry postgres rails-secrets ; do
      mkdir -p "${secret_dir}/${secret}"
      cp -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
    done
    for secret in redis minio objectstorage ldap omniauth smtp ; do
      if [ -e "${config_dir}/${secret}" ]; then
        mkdir -p "${secret_dir}/${secret}"
        cp -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
      fi
    done
    
    
    
# Leave this here - This line denotes end of block to the parser.
---
# Source: gitlab/charts/gitlab/charts/task-runner/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-task-runner
  namespace: gitlab
  labels:
    app: task-runner
    chart: task-runner-3.2.2
    release: gitlab
    heritage: Helm
    
data:
  database.yml.erb: |
    production:
      adapter: postgresql
      encoding: unicode
      database: gitlabhq_production
      username: gitlab
      password: "<%= File.read("/etc/gitlab/postgres/psql-password").strip.dump[1..-2] %>"
      host: "gitlab-postgresql"
      port: 5432
      pool: 10
      prepared_statements: false
      
  smtp_settings.rb: |
    
  resque.yml.erb: |
    production:
      # Redis (single instance)
      url: redis://:<%= URI.escape(File.read("/etc/gitlab/redis/password").strip) %>@gitlab-redis-master:6379
      id:
  gitlab.yml.erb: |
    production: &base
      gitlab:
        host: gitlab.dev-gitlab2.fences-bootstrap.p1.dev
        https: true
        max_request_duration_seconds: 57
        impersonation_enabled: 
        usage_ping_enabled: true
        default_can_create_group: true
        username_changing_enabled: true
        issue_closing_pattern: 
        default_theme: 
        default_projects_features:
          issues: true
          merge_requests: true
          wiki: true
          snippets: true
          builds: true
          container_registry: true
        webhook_timeout: 
        trusted_proxies:
        time_zone: "UTC"        
        email_from: "gitlab@gitlab.dev-gitlab2.fences-bootstrap.p1.dev"
        email_display_name: "GitLab"
        email_reply_to: "noreply@gitlab.dev-gitlab2.fences-bootstrap.p1.dev"
        email_subject_suffix: ""
      
      artifacts:
        enabled: true
        object_store:
          enabled: true
          remote_directory: gitlab-artifacts
          direct_upload: true
          background_upload: false
          proxy_download: true
          connection:
            provider: AWS
            region: us-east-1
            aws_access_key_id: "<%= File.read('/etc/gitlab/minio/accesskey').strip.dump[1..-2] %>"
            aws_secret_access_key: "<%= File.read('/etc/gitlab/minio/secretkey').strip.dump[1..-2] %>"
            host: minio.gitlab.dev-gitlab2.fences-bootstrap.p1.dev
            endpoint: http://gitlab-minio-svc:9000
            path_style: true
      lfs:
        enabled: true
        object_store:
          enabled: true
          remote_directory: git-lfs
          direct_upload: true
          background_upload: false
          proxy_download: true
          connection:
            provider: AWS
            region: us-east-1
            aws_access_key_id: "<%= File.read('/etc/gitlab/minio/accesskey').strip.dump[1..-2] %>"
            aws_secret_access_key: "<%= File.read('/etc/gitlab/minio/secretkey').strip.dump[1..-2] %>"
            host: minio.gitlab.dev-gitlab2.fences-bootstrap.p1.dev
            endpoint: http://gitlab-minio-svc:9000
            path_style: true
      uploads:
        enabled: true
        object_store:
          enabled: true
          remote_directory: gitlab-uploads
          direct_upload: true
          background_upload: false
          proxy_download: true
          connection:
            provider: AWS
            region: us-east-1
            aws_access_key_id: "<%= File.read('/etc/gitlab/minio/accesskey').strip.dump[1..-2] %>"
            aws_secret_access_key: "<%= File.read('/etc/gitlab/minio/secretkey').strip.dump[1..-2] %>"
            host: minio.gitlab.dev-gitlab2.fences-bootstrap.p1.dev
            endpoint: http://gitlab-minio-svc:9000
            path_style: true
      packages:
        enabled: true
        object_store:
          enabled: true
          remote_directory: gitlab-packages
          direct_upload: true
          background_upload: false
          proxy_download: true
          connection:
            provider: AWS
            region: us-east-1
            aws_access_key_id: "<%= File.read('/etc/gitlab/minio/accesskey').strip.dump[1..-2] %>"
            aws_secret_access_key: "<%= File.read('/etc/gitlab/minio/secretkey').strip.dump[1..-2] %>"
            host: minio.gitlab.dev-gitlab2.fences-bootstrap.p1.dev
            endpoint: http://gitlab-minio-svc:9000
            path_style: true
      external_diffs:
        enabled: 
        when: 
        object_store:
          enabled: false
          remote_directory: gitlab-mr-diffs
          direct_upload: true
          background_upload: false
          proxy_download: true
          connection:
            provider: AWS
            region: us-east-1
            aws_access_key_id: "<%= File.read('/etc/gitlab/minio/accesskey').strip.dump[1..-2] %>"
            aws_secret_access_key: "<%= File.read('/etc/gitlab/minio/secretkey').strip.dump[1..-2] %>"
            host: minio.gitlab.dev-gitlab2.fences-bootstrap.p1.dev
            endpoint: http://gitlab-minio-svc:9000
            path_style: true
      pseudonymizer:
        manifest: config/pseudonymizer.yml
        upload:
          remote_directory: gitlab-pseudo
          connection:
            provider: AWS
            region: us-east-1
            aws_access_key_id: "<%= File.read('/etc/gitlab/minio/accesskey').strip.dump[1..-2] %>"
            aws_secret_access_key: "<%= File.read('/etc/gitlab/minio/secretkey').strip.dump[1..-2] %>"
            host: minio.gitlab.dev-gitlab2.fences-bootstrap.p1.dev
            endpoint: http://gitlab-minio-svc:9000
            path_style: true
      
      pages:
        enabled: false
      mattermost:
        enabled: false
      ## Registry Integration
      registry:
        enabled: true
        host: registry.gitlab.dev-gitlab2.fences-bootstrap.p1.dev
        api_url: http://gitlab-registry:5000
        key: /etc/gitlab/registry/gitlab-registry.key
        issuer: gitlab-issuer
      gitlab_ci:
      ldap:
        enabled: false
      
      omniauth:
        enabled: false
        sync_profile_from_provider: []
        sync_profile_attributes: ["email"]
        allow_single_sign_on: ["saml"]
        block_auto_created_users: true
        auto_link_ldap_user: false
        auto_link_saml_user: false
        external_providers: []
      kerberos:
        enabled: false
      shared:
      gitaly:
        client_path: /home/git/gitaly/bin
        token: "<%= File.read('/etc/gitlab/gitaly/gitaly_token').strip.dump[1..-2] %>"
      repositories:
        storages: # You must have at least a `default` storage path.
          default:
            path: /var/opt/gitlab/repo
            gitaly_address: tcp://gitlab-gitaly-0.gitlab-gitaly.gitlab:8075
          
      backup:
        path: "tmp/backups"   # Relative paths are relative to Rails.root (default: tmp/backups/)
      gitlab_shell:
        path: /home/git/gitlab-shell/
        hooks_path: /home/git/gitlab-shell/hooks/
        upload_pack: true
        receive_pack: true
        secret_file: /etc/gitlab/shell/.gitlab_shell_secret
      workhorse:
      git:
        bin_path: /usr/bin/git
      webpack:
      monitoring:
        ip_whitelist:
          - 127.0.0.0/8
        sidekiq_exporter:
      extra:
  configure: |
    set -e
    config_dir="/init-config"
    secret_dir="/init-secrets"
    
    for secret in shell gitaly registry postgres rails-secrets ; do
      mkdir -p "${secret_dir}/${secret}"
      cp -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
    done
    for secret in redis minio objectstorage ldap omniauth smtp ; do
      if [ -e "${config_dir}/${secret}" ]; then
        mkdir -p "${secret_dir}/${secret}"
        cp -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
      fi
    done
    
    
    
    if [ ! -f "/${secret_dir}/objectstorage/.s3cfg" ]; then
    cat <<EOF > "/${secret_dir}/.s3cfg"
    [default]
    access_key = $(cat /init-secrets/minio/accesskey)
    secret_key = $(cat /init-secrets/minio/secretkey)
    bucket_location = us-east-1
    host_base = minio.gitlab.dev-gitlab2.fences-bootstrap.p1.dev
    host_bucket = minio.gitlab.dev-gitlab2.fences-bootstrap.p1.dev/%(bucket)
    default_mime_type = binary/octet-stream
    enable_multipart = True
    multipart_max_chunks = 10000
    multipart_chunk_size_mb = 128
    recursive = True
    recv_chunk = 65536
    send_chunk = 65536
    server_side_encryption = False
    signature_v2 = True
    socket_timeout = 300
    use_mime_magic = True
    verbosity = WARNING
    website_endpoint = https://minio.gitlab.dev-gitlab2.fences-bootstrap.p1.dev
    EOF
    else
      mv "/${secret_dir}/objectstorage/.s3cfg" "/${secret_dir}/.s3cfg"
    fi
  configure-gsutil: |
    # The following script is used to configure gsutil when creating backups
    # It provides inputs to the `gsutil config -e` prompt as follows:
    # 1) Path to service account JSON key file
    # 2) Do not set permissions for key file
    # 3) GCP Project ID
    # 4) Decline anonymous usage statistics
    printf "$GOOGLE_APPLICATION_CREDENTIALS\nN\n\nN\n" | gsutil config -e
---
# Source: gitlab/charts/gitlab/charts/unicorn/templates/configmap.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-workhorse-config
  namespace: gitlab
  labels:
    app: unicorn
    chart: unicorn-3.2.2
    release: gitlab
    heritage: Helm
    
data:
  installation_type: |
    gitlab-helm-chart
  workhorse-config.toml.erb: |
    [redis]
    URL = "redis://gitlab-redis-master:6379"
    Password = "<%= File.read("/etc/gitlab/redis/password").strip.dump[1..-2] %>"
  configure: |
      set -e
      mkdir -p /init-secrets-workhorse/gitlab-workhorse
      cp -v -r -L /init-config/gitlab-workhorse/secret /init-secrets-workhorse/gitlab-workhorse/secret
      mkdir -p /init-secrets-workhorse/redis
      cp -v -r -L /init-config/redis/password /init-secrets-workhorse/redis/
# Leave this here - This line denotes end of block to the parser.
---
# Source: gitlab/charts/gitlab/charts/unicorn/templates/configmap.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-unicorn
  namespace: gitlab
  labels:
    app: unicorn
    chart: unicorn-3.2.2
    release: gitlab
    heritage: Helm
    
data:
  installation_type: |
    gitlab-helm-chart
  database.yml.erb: |
    production:
      adapter: postgresql
      encoding: unicode
      database: gitlabhq_production
      username: gitlab
      password: "<%= File.read("/etc/gitlab/postgres/psql-password").strip.dump[1..-2] %>"
      host: "gitlab-postgresql"
      port: 5432
      pool: 10
      prepared_statements: false
      # load_balancing:
      #   hosts:
      #     - host1.example.com
      #     - host2.example.com
      
  smtp_settings.rb: |
    
  resque.yml.erb: |
    production:
      # Redis (single instance)
      url: redis://:<%= URI.escape(File.read("/etc/gitlab/redis/password").strip) %>@gitlab-redis-master:6379
      id:
  unicorn.rb: |
    # This file should be equivalent to `unicorn.rb` from:
    # * gitlab-foss: https://gitlab.com/gitlab-org/gitlab-foss/blob/master/config/unicorn.rb.example
    # * omnibus: https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/files/gitlab-cookbooks/gitlab/templates/default/unicorn.rb.erb
    worker_processes 2
    working_directory "/srv/gitlab"
    listen "0.0.0.0:8080", :tcp_nopush => true
    timeout 60
    pid "/home/git/unicorn.pid"
    preload_app true

    require_relative "/srv/gitlab/lib/gitlab/cluster/lifecycle_events"

    before_exec do |server|
      # Signal application hooks that we're about to restart
      Gitlab::Cluster::LifecycleEvents.do_before_master_restart
    end

    run_once = true
    before_fork do |server, worker|
      if run_once
        # There is a difference between Puma and Unicorn:
        # - Puma calls before_fork once when booting up master process
        # - Unicorn runs before_fork whenever new work is spawned
        # To unify this behavior we call before_fork only once (we use
        # this callback for deleting Prometheus files so for our purposes
        # it makes sense to align behavior with Puma)
        run_once = false

        # Signal application hooks that we're about to fork
        Gitlab::Cluster::LifecycleEvents.do_before_fork
      end

      # The following is only recommended for memory/DB-constrained
      # installations.  It is not needed if your system can house
      # twice as many worker_processes as you have configured.
      #
      # This allows a new master process to incrementally
      # phase out the old master process with SIGTTOU to avoid a
      # thundering herd (especially in the "preload_app false" case)
      # when doing a transparent upgrade.  The last worker spawned
      # will then kill off the old master process with a SIGQUIT.
      old_pid = "#{server.config[:pid]}.oldbin"
      if old_pid != server.pid
        begin
          sig = (worker.nr + 1) >= server.worker_processes ? :QUIT : :TTOU
          Process.kill(sig, File.read(old_pid).to_i)
        rescue Errno::ENOENT, Errno::ESRCH
        end
      end
      #
      # Throttle the master from forking too quickly by sleeping.  Due
      # to the implementation of standard Unix signal handlers, this
      # helps (but does not completely) prevent identical, repeated signals
      # from being lost when the receiving process is busy.
      # sleep 1
    end

    after_fork do |server, worker|
      # Signal application hooks of worker start
      Gitlab::Cluster::LifecycleEvents.do_worker_start

      # per-process listener ports for debugging/admin/migrations
      # addr = "127.0.0.1:#{9293 + worker.nr}"
      # server.listen(addr, :tries => -1, :delay => 5, :tcp_nopush => true)
    end

    ENV['GITLAB_UNICORN_MEMORY_MIN'] = (1024 * 1 << 20).to_s
    ENV['GITLAB_UNICORN_MEMORY_MAX'] = (1280 * 1 << 20).to_s
  puma.rb: |
    # This file should be equivalent to `puma.rb` from:
    # * gitlab-foss: https://gitlab.com/gitlab-org/gitlab-foss/blob/master/config/puma.rb.example
    # * omnibus: https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/files/gitlab-cookbooks/gitlab/templates/default/puma.rb.erb
    # frozen_string_literal: true

    pidfile "/home/git/puma.pid"
    state_path "/home/git/puma.pid"

    stdout_redirect '/srv/gitlab/log/puma.stdout.log',
      '/srv/gitlab/log/puma.stderr.log',
      true

    # Configure "min" to be the minimum number of threads to use to answer
    # requests and "max" the maximum.
    threads 4, 4

    # By default, workers accept all requests and queue them to pass to handlers.
    # When false, workers accept the number of simultaneous requests configured.
    #
    # Queueing requests generally improves performance, but can cause deadlocks if
    # the app is waiting on a request to itself. See https://github.com/puma/puma/issues/612
    #
    # When set to false this may require a reverse proxy to handle slow clients and
    # queue requests before they reach puma. This is due to disabling HTTP keepalive
    queue_requests false

    # Bind the server to "url". "tcp://", "unix://" and "ssl://" are the only
    # accepted protocols.
    bind 'tcp://0.0.0.0:8080'

    directory "/srv/gitlab"

    workers 2

    require_relative "/srv/gitlab/lib/gitlab/cluster/lifecycle_events"
    require_relative "/srv/gitlab/lib/gitlab/cluster/puma_worker_killer_initializer"

    on_restart do
      # Signal application hooks that we're about to restart
      Gitlab::Cluster::LifecycleEvents.do_before_master_restart
    end

    options = { workers: 2 }

    before_fork do
      # Signal to the puma killer
      Gitlab::Cluster::PumaWorkerKillerInitializer.start(options, puma_per_worker_max_memory_mb: 1024)

      # Signal application hooks that we're about to fork
      Gitlab::Cluster::LifecycleEvents.do_before_fork
    end

    Gitlab::Cluster::LifecycleEvents.set_puma_options options
    on_worker_boot do
      # Signal application hooks of worker start
      Gitlab::Cluster::LifecycleEvents.do_worker_start
    end

    # Preload the application before starting the workers; this conflicts with
    # phased restart feature. (off by default)

    preload_app!

    tag 'gitlab-puma-worker'

    # Verifies that all workers have checked in to the master process within
    # the given timeout. If not the worker process will be restarted. Default
    # value is 60 seconds.
    #
    worker_timeout 60

    # Use customised JSON formatter for Puma log
    require_relative "/srv/gitlab/lib/gitlab/puma_logging/json_formatter"

    json_formatter = Gitlab::PumaLogging::JSONFormatter.new
    log_formatter do |str|
        json_formatter.call(str)
    end
  gitlab.yml.erb: |
    production: &base
      gitlab:
        host: gitlab.dev-gitlab2.fences-bootstrap.p1.dev
        https: true
        max_request_duration_seconds: 57
        impersonation_enabled: 
        usage_ping_enabled: true
        default_can_create_group: true
        username_changing_enabled: true
        issue_closing_pattern: 
        default_theme: 
        default_projects_features:
          issues: true
          merge_requests: true
          wiki: true
          snippets: true
          builds: true
          container_registry: true
        webhook_timeout: 
        trusted_proxies:
        time_zone: "UTC"        
        email_from: "gitlab@gitlab.dev-gitlab2.fences-bootstrap.p1.dev"
        email_display_name: "GitLab"
        email_reply_to: "noreply@gitlab.dev-gitlab2.fences-bootstrap.p1.dev"
        email_subject_suffix: ""
      
      gravatar:
        plain_url: 
        ssl_url: 
      extra:
        
        
        
      artifacts:
        enabled: true
        object_store:
          enabled: true
          remote_directory: gitlab-artifacts
          direct_upload: true
          background_upload: false
          proxy_download: true
          connection:
            provider: AWS
            region: us-east-1
            aws_access_key_id: "<%= File.read('/etc/gitlab/minio/accesskey').strip.dump[1..-2] %>"
            aws_secret_access_key: "<%= File.read('/etc/gitlab/minio/secretkey').strip.dump[1..-2] %>"
            host: minio.gitlab.dev-gitlab2.fences-bootstrap.p1.dev
            endpoint: http://gitlab-minio-svc:9000
            path_style: true
      lfs:
        enabled: true
        object_store:
          enabled: true
          remote_directory: git-lfs
          direct_upload: true
          background_upload: false
          proxy_download: true
          connection:
            provider: AWS
            region: us-east-1
            aws_access_key_id: "<%= File.read('/etc/gitlab/minio/accesskey').strip.dump[1..-2] %>"
            aws_secret_access_key: "<%= File.read('/etc/gitlab/minio/secretkey').strip.dump[1..-2] %>"
            host: minio.gitlab.dev-gitlab2.fences-bootstrap.p1.dev
            endpoint: http://gitlab-minio-svc:9000
            path_style: true
      uploads:
        enabled: true
        object_store:
          enabled: true
          remote_directory: gitlab-uploads
          direct_upload: true
          background_upload: false
          proxy_download: true
          connection:
            provider: AWS
            region: us-east-1
            aws_access_key_id: "<%= File.read('/etc/gitlab/minio/accesskey').strip.dump[1..-2] %>"
            aws_secret_access_key: "<%= File.read('/etc/gitlab/minio/secretkey').strip.dump[1..-2] %>"
            host: minio.gitlab.dev-gitlab2.fences-bootstrap.p1.dev
            endpoint: http://gitlab-minio-svc:9000
            path_style: true
      packages:
        enabled: true
        object_store:
          enabled: true
          remote_directory: gitlab-packages
          direct_upload: true
          background_upload: false
          proxy_download: true
          connection:
            provider: AWS
            region: us-east-1
            aws_access_key_id: "<%= File.read('/etc/gitlab/minio/accesskey').strip.dump[1..-2] %>"
            aws_secret_access_key: "<%= File.read('/etc/gitlab/minio/secretkey').strip.dump[1..-2] %>"
            host: minio.gitlab.dev-gitlab2.fences-bootstrap.p1.dev
            endpoint: http://gitlab-minio-svc:9000
            path_style: true
      external_diffs:
        enabled: 
        when: 
        object_store:
          enabled: false
          remote_directory: gitlab-mr-diffs
          direct_upload: true
          background_upload: false
          proxy_download: true
          connection:
            provider: AWS
            region: us-east-1
            aws_access_key_id: "<%= File.read('/etc/gitlab/minio/accesskey').strip.dump[1..-2] %>"
            aws_secret_access_key: "<%= File.read('/etc/gitlab/minio/secretkey').strip.dump[1..-2] %>"
            host: minio.gitlab.dev-gitlab2.fences-bootstrap.p1.dev
            endpoint: http://gitlab-minio-svc:9000
            path_style: true
      
      pages:
        enabled: false
      mattermost:
        enabled: false
      gitlab_ci:
      ldap:
        enabled: false
      
      omniauth:
        enabled: false
        sync_profile_from_provider: []
        sync_profile_attributes: ["email"]
        allow_single_sign_on: ["saml"]
        block_auto_created_users: true
        auto_link_ldap_user: false
        auto_link_saml_user: false
        external_providers: []
      kerberos:
        enabled: false
      shared:
      gitaly:
        client_path: /home/git/gitaly/bin
        token: "<%= File.read('/etc/gitlab/gitaly/gitaly_token').strip.dump[1..-2] %>"
      repositories:
        storages: # You must have at least a `default` storage path.
          default:
            path: /var/opt/gitlab/repo
            gitaly_address: tcp://gitlab-gitaly-0.gitlab-gitaly.gitlab:8075
          
      backup:
        path: "tmp/backups"   # Relative paths are relative to Rails.root (default: tmp/backups/)
      gitlab_shell:
        path: /home/git/gitlab-shell/
        hooks_path: /home/git/gitlab-shell/hooks/
        upload_pack: true
        receive_pack: true
        ssh_port: 22
        secret_file: /etc/gitlab/shell/.gitlab_shell_secret
      workhorse:
        secret_file: /etc/gitlab/gitlab-workhorse/secret
      git:
        bin_path: /usr/bin/git
      webpack:
      monitoring:
        ip_whitelist:
          - 0.0.0.0/0
        web_exporter:
          enabled: false
          address: 0.0.0.0
          port: 8083
        sidekiq_exporter:
      shutdown:
        blackout_seconds: 10
      rack_attack:
        git_basic_auth:
      ## Registry Integration
      registry:
        enabled: true
        host: registry.gitlab.dev-gitlab2.fences-bootstrap.p1.dev
        api_url: http://gitlab-registry:5000
        key: /etc/gitlab/registry/gitlab-registry.key
        issuer: gitlab-issuer
  configure: |
    set -e
    config_dir="/init-config"
    secret_dir="/init-secrets"
    
    for secret in shell gitaly registry postgres rails-secrets gitlab-workhorse ; do
      mkdir -p "${secret_dir}/${secret}"
      cp -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
    done
    for secret in redis minio objectstorage ldap omniauth smtp ; do
      if [ -e "${config_dir}/${secret}" ]; then
        mkdir -p "${secret_dir}/${secret}"
        cp -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
      fi
    done
---
# Source: gitlab/charts/minio/templates/minioconfig_configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-minio-config-cm
  namespace: gitlab
  labels:
    app: minio
    chart: minio-0.4.3
    release: gitlab
    heritage: Helm
    
data:
  initialize: |-
    #!/bin/sh
    # minio/mc container has Busybox Ash, be sure to be POSIX compliant and avoid Bash-isms
    set -e ; # Have script exit in the event of a failed command.
    
    # connectToMinio
    # Use a check-sleep-check loop to wait for Minio service to be available
    connectToMinio() {
      set -e ; # fail if we can't read the keys.
      ACCESS=$(cat /config/accesskey) ; SECRET=$(cat /config/secretkey) ;
      set +e ; # The connections to minio are allowed to fail.
      echo "Connecting to Minio server: http://$MINIO_ENDPOINT:$MINIO_PORT" ;
      MC_COMMAND="mc config host add myminio http://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET" ;
      $MC_COMMAND ;
      STATUS=$? ;
      until [ $STATUS -eq 0 ] ;
      do
        sleep 1 ; # 1 second intervals between attempts
        $MC_COMMAND ;
        STATUS=$? ;
      done ;
      set -e ; # reset `e` as active
      return 0
    }
    
    # checkBucketExists ($bucket)
    # Check if the bucket exists, by using the exit code of `mc ls`
    checkBucketExists() {
      BUCKET=$1
      CMD=$(/usr/bin/mc ls myminio/$BUCKET > /dev/null 2>&1)
      return $?
    }
    
    # createBucket ($bucket, $policy, $purge)
    # Ensure bucket exists, purging if asked to
    createBucket() {
      BUCKET=$1
      POLICY=$2
      PURGE=$3
    
    
      # Purge the bucket, if set & exists
      # Since PURGE is user input, check explicitly for `true`
      if [ $PURGE = true ]; then
        if checkBucketExists $BUCKET ; then
          echo "Purging bucket '$BUCKET'."
          set +e ; # don't exit if this fails
          /usr/bin/mc rm -r --force myminio/$BUCKET
          set -e ; # reset `e` as active
        else
          echo "Bucket '$BUCKET' does not exist, skipping purge."
        fi
      fi
    
      # Create the bucket if it does not exist
      if ! checkBucketExists $BUCKET ; then
        echo "Creating bucket '$BUCKET'"
        /usr/bin/mc mb myminio/$BUCKET
      else
        echo "Bucket '$BUCKET' already exists."
      fi
    
      # At this point, the bucket should exist, skip checking for existance
      # Set policy on the bucket
      echo "Setting policy of bucket '$BUCKET' to '$POLICY'."
      /usr/bin/mc policy $POLICY myminio/$BUCKET
    }
    
    connectToMinio
    createBucket registry none false
    createBucket git-lfs none false
    createBucket runner-cache none false
    createBucket gitlab-uploads none false
    createBucket gitlab-artifacts none false
    createBucket gitlab-backups none false
    createBucket gitlab-packages none false
    createBucket tmp none false
    createBucket gitlab-pseudo none false
    createBucket gitlab-mr-diffs none false
    
  configure: |-
    sed -e 's@ACCESS_KEY@'"$(cat /config/accesskey)"'@' -e 's@SECRET_KEY@'"$(cat /config/secretkey)"'@' /config/config.json > /minio/config.json
  config.json: |-
    {
      "version": "20",
      "credential": {
        "accessKey": "ACCESS_KEY",
        "secretKey": "SECRET_KEY"
      },
      "region": "us-east-1",
      "browser": "on",
      "domain": "",
      "logger": {
        "console": {
          "enable": true
        },
        "file": {
          "enable": false,
          "fileName": ""
        }
      },
      "notify": {
        "amqp": {
          "1": {
            "enable": false,
            "url": "",
            "exchange": "",
            "routingKey": "",
            "exchangeType": "",
            "deliveryMode": 0,
            "mandatory": false,
            "immediate": false,
            "durable": false,
            "internal": false,
            "noWait": false,
            "autoDeleted": false
          }
        },
        "nats": {
          "1": {
            "enable": false,
            "address": "",
            "subject": "",
            "username": "",
            "password": "",
            "token": "",
            "secure": false,
            "pingInterval": 0,
            "streaming": {
              "enable": false,
              "clusterID": "",
              "clientID": "",
              "async": false,
              "maxPubAcksInflight": 0
            }
          }
        },
        "elasticsearch": {
          "1": {
            "enable": false,
            "format": "namespace",
            "url": "",
            "index": ""
          }
        },
        "redis": {
          "1": {
            "enable": false,
            "format": "namespace",
            "address": "",
            "password": "",
            "key": ""
          }
        },
        "postgresql": {
          "1": {
            "enable": false,
            "format": "namespace",
            "connectionString": "",
            "table": "",
            "host": "",
            "port": "",
            "user": "",
            "password": "",
            "database": ""
          }
        },
        "kafka": {
          "1": {
            "enable": false,
            "brokers": null,
            "topic": ""
          }
        },
        "webhook": {
          "1": {
            "enable": false,
            "endpoint": ""
          }
        },
        "mysql": {
          "1": {
            "enable": false,
            "format": "namespace",
            "dsnString": "",
            "table": "",
            "host": "",
            "port": "",
            "user": "",
            "password": "",
            "database": ""
          }
        },
        "mqtt": {
          "1": {
            "enable": false,
            "broker": "",
            "topic": "",
            "qos": 0,
            "clientId": "",
            "username": "",
            "password": ""
          }
        }
      }
    }
# Blank line to signal end of Block
---
# Source: gitlab/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-redis
  labels:
    app: redis
    chart: redis-10.3.4
    heritage: Helm
    release: gitlab
data:
  redis.conf: |-
    # User-supplied configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
  master.conf: |-
    dir /data
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
  replica.conf: |-
    dir /data
    slave-read-only yes
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
---
# Source: gitlab/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-redis-health
  labels:
    app: redis
    chart: redis-10.3.4
    heritage: Helm
    release: gitlab
data:
  ping_readiness_local.sh: |-
    password_aux=`cat ${REDIS_PASSWORD_FILE}`
    export REDIS_PASSWORD=$password_aux
    response=$(
      timeout -s 9 $1 \
      redis-cli \
        -a $REDIS_PASSWORD --no-auth-warning \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    password_aux=`cat ${REDIS_PASSWORD_FILE}`
    export REDIS_PASSWORD=$password_aux
    response=$(
      timeout -s 9 $1 \
      redis-cli \
        -a $REDIS_PASSWORD --no-auth-warning \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    password_aux=`cat ${REDIS_MASTER_PASSWORD_FILE}`
    export REDIS_MASTER_PASSWORD=$password_aux
    response=$(
      timeout -s 9 $1 \
      redis-cli \
        -a $REDIS_MASTER_PASSWORD --no-auth-warning \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    password_aux=`cat ${REDIS_MASTER_PASSWORD_FILE}`
    export REDIS_MASTER_PASSWORD=$password_aux
    response=$(
      timeout -s 9 $1 \
      redis-cli \
        -a $REDIS_MASTER_PASSWORD --no-auth-warning \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: gitlab/templates/chart-info.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-gitlab-chart-info
  namespace: gitlab
  labels:
    app: gitlab
    chart: gitlab-3.2.2
    release: gitlab
    heritage: Helm
    
data:
  gitlabVersion: "12.9.2"
  gitlabChartVersion: "3.2.2"
---
# Source: gitlab/templates/initdb-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-postgresql-init-db
  namespace: gitlab
  labels:
    app: gitlab
    chart: gitlab-3.2.2
    release: gitlab
    heritage: Helm
    
data:
  enable_extensions.sh: |
    PGPASS=$(cat ${POSTGRES_POSTGRES_PASSWORD_FILE}) psql -d gitlabhq_production -U postgres -c 'CREATE EXTENSION pg_trgm;'
# Leave this here - This line denotes end of block to the parser.
---
# Source: gitlab/charts/minio/templates/minio_pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: gitlab-minio
  namespace: gitlab
  labels:
    app: minio
    chart: minio-0.4.3
    release: gitlab
    heritage: Helm
    
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "10Gi"
  selector:
---
# Source: gitlab/charts/gitlab-runner/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: gitlab-gitlab-runner
  labels:
    app: gitlab-gitlab-runner
    chart: gitlab-runner-0.15.0
    release: "gitlab"
    heritage: "Helm"
---
# Source: gitlab/charts/gitlab-runner/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: "Role"
metadata:
  name: gitlab-gitlab-runner
  labels:
    app: gitlab-gitlab-runner
    chart: gitlab-runner-0.15.0
    release: "gitlab"
    heritage: "Helm"
rules:
- apiGroups: [""]
  resources: ["*"]
  verbs: ["*"]
---
# Source: gitlab/charts/gitlab-runner/templates/role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: "RoleBinding"
metadata:
  name: gitlab-gitlab-runner
  labels:
    app: gitlab-gitlab-runner
    chart: gitlab-runner-0.15.0
    release: "gitlab"
    heritage: "Helm"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: "Role"
  name: gitlab-gitlab-runner
subjects:
- kind: ServiceAccount
  name: gitlab-gitlab-runner
  namespace: "gitlab"
---
# Source: gitlab/charts/gitlab/charts/gitaly/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gitlab-gitaly
  namespace: gitlab
  labels:
    app: gitaly
    chart: gitaly-3.2.2
    release: gitlab
    heritage: Helm
    
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9236"
    
spec:
  type: ClusterIP
  clusterIP: "None"
  ports:
    - port: 8075
      name: gitaly
      targetPort: 8075
    - port: 9236
      name: gitaly-metrics
  selector:
    app: gitaly
    release: gitlab
---
# Source: gitlab/charts/gitlab/charts/gitlab-exporter/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gitlab-gitlab-exporter
  namespace: gitlab
  labels:
    app: gitlab-exporter
    chart: gitlab-exporter-3.2.2
    release: gitlab
    heritage: Helm
    
  annotations:
    
spec:
  type: ClusterIP
  ports:
    - port: 9168
      targetPort: 9168
      protocol: TCP
      name: gitlab-exporter
  selector:
    app: gitlab-exporter
    release: gitlab
---
# Source: gitlab/charts/gitlab/charts/unicorn/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gitlab-unicorn
  namespace: gitlab
  labels:
    app: unicorn
    chart: unicorn-3.2.2
    release: gitlab
    heritage: Helm
    
  annotations:
    
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
      name: http-unicorn
    - port: 8181
      targetPort: 8181
      protocol: TCP
      name: http-workhorse
  selector:
    app: unicorn
    release: gitlab
---
# Source: gitlab/charts/minio/templates/minio_svc.yaml
kind: Service
apiVersion: v1
metadata:
  name: gitlab-minio-svc
  namespace: gitlab
  labels:
    app: minio
    chart: minio-0.4.3
    release: gitlab
    heritage: Helm
    
  annotations:
    
spec:
  type: ClusterIP
  selector:
    app: minio
    release: gitlab
    component: app
  ports:
    - name: service
      port: 9000
      targetPort: 9000
      protocol: TCP
---
# Source: gitlab/charts/postgresql/templates/metrics-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: gitlab-postgresql-metrics
  labels:
    app: postgresql
    chart: postgresql-7.7.3
    release: "gitlab"
    heritage: "Helm"
  annotations:
    prometheus.io/port: "9187"
    prometheus.io/scrape: "true"
spec:
  type: ClusterIP
  ports:
    - name: metrics
      port: 9187
      targetPort: metrics
  selector:
    app: postgresql
    release: gitlab
    role: master
---
# Source: gitlab/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: gitlab-postgresql-headless
  labels:
    app: postgresql
    chart: postgresql-7.7.3
    release: "gitlab"
    heritage: "Helm"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: postgresql
      port: 5432
      targetPort: postgresql
  selector:
    app: postgresql
    release: "gitlab"
---
# Source: gitlab/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: gitlab-postgresql
  labels:
    app: postgresql
    chart: postgresql-7.7.3
    release: "gitlab"
    heritage: "Helm"
spec:
  type: ClusterIP
  ports:
    - name: postgresql
      port: 5432
      targetPort: postgresql
  selector:
    app: postgresql
    release: "gitlab"
    role: master
---
# Source: gitlab/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: gitlab-redis-headless
  labels:
    app: redis
    chart: redis-10.3.4
    release: gitlab
    heritage: Helm
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: redis
    port: 6379
    targetPort: redis
  selector:
    app: redis
    release: gitlab
---
# Source: gitlab/charts/redis/templates/metrics-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: gitlab-redis-metrics
  labels:
    app: redis
    chart: redis-10.3.4
    release: gitlab
    heritage: Helm
spec:
  type: ClusterIP
  ports:
  - name: metrics
    port: 9121
    targetPort: metrics
  selector:
    app: redis
    release: gitlab
---
# Source: gitlab/charts/redis/templates/redis-master-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: gitlab-redis-master
  labels:
    app: redis
    chart: redis-10.3.4
    release: gitlab
    heritage: Helm
spec:
  type: ClusterIP
  ports:
  - name: redis
    port: 6379
    targetPort: redis
  selector:
    app: redis
    release: gitlab
    role: master
---
# Source: gitlab/charts/gitlab-runner/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gitlab-gitlab-runner
  labels:
    app: gitlab-gitlab-runner
    chart: gitlab-runner-0.15.0
    release: "gitlab"
    heritage: "Helm"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gitlab-gitlab-runner
  template:
    metadata:
      labels:
        app: gitlab-gitlab-runner
        chart: gitlab-runner-0.15.0
        release: "gitlab"
        heritage: "Helm"
      annotations:
        checksum/configmap: 2244e0f888b6a61f23b6a61cd30aa625157966bda312240a044e1bd07342f72b
        checksum/secrets: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        prometheus.io/scrape: 'true'
        prometheus.io/port: '9252'
    spec:
      securityContext:
        runAsUser: 100
        fsGroup: 65533
      terminationGracePeriodSeconds: 3600
      initContainers:
      - name: configure
        command: ['sh', '/config/configure']
        image: gitlab/gitlab-runner:alpine-v12.9.0
        imagePullPolicy: "IfNotPresent"
        env:
                
        - name: CI_SERVER_URL
          value: http://gitlab-unicorn.gitlab.svc.cluster.local:8181
        - name: CLONE_URL
          value: ""
        - name: RUNNER_REQUEST_CONCURRENCY
          value: "1"
        - name: RUNNER_EXECUTOR
          value: "kubernetes"
        - name: REGISTER_LOCKED
          value: "false"
        - name: RUNNER_TAG_LIST
          value: ""
        - name: RUNNER_OUTPUT_LIMIT
          value: "4096"
        - name: KUBERNETES_IMAGE
          value: "ubuntu:16.04"
        
        - name: KUBERNETES_NAMESPACE
          value: "gitlab"
        - name: KUBERNETES_POLL_TIMEOUT
          value: "180"
        - name: KUBERNETES_CPU_LIMIT
          value: ""
        - name: KUBERNETES_MEMORY_LIMIT
          value: ""
        - name: KUBERNETES_CPU_REQUEST
          value: ""
        - name: KUBERNETES_MEMORY_REQUEST
          value: ""
        - name: KUBERNETES_SERVICE_ACCOUNT
          value: ""
        - name: KUBERNETES_SERVICE_CPU_LIMIT
          value: ""
        - name: KUBERNETES_SERVICE_MEMORY_LIMIT
          value: ""
        - name: KUBERNETES_SERVICE_CPU_REQUEST
          value: ""
        - name: KUBERNETES_SERVICE_MEMORY_REQUEST
          value: ""
        - name: KUBERNETES_HELPER_CPU_LIMIT
          value: ""
        - name: KUBERNETES_HELPER_MEMORY_LIMIT
          value: ""
        - name: KUBERNETES_HELPER_CPU_REQUEST
          value: ""
        - name: KUBERNETES_HELPER_MEMORY_REQUEST
          value: ""
        - name: KUBERNETES_HELPER_IMAGE
          value: ""
        - name: KUBERNETES_PULL_POLICY
          value: ""
        - name: CACHE_TYPE
          value: "s3"
        - name: CACHE_PATH
          value: "gitlab-runner"
        - name: CACHE_SHARED
          value: "true"
        - name: CACHE_S3_SERVER_ADDRESS
          value: "minio.gitlab.dev-gitlab2.fences-bootstrap.p1.dev"
        - name: CACHE_S3_BUCKET_NAME
          value: "runner-cache"
        - name: CACHE_S3_BUCKET_LOCATION
          value: "us-east-1"
        volumeMounts:
        - name: runner-secrets
          mountPath: /secrets
          readOnly: false
        - name: scripts
          mountPath: /config
          readOnly: true
        - name: init-runner-secrets
          mountPath: /init-secrets
          readOnly: true
        resources:
          {}
      serviceAccountName: gitlab-gitlab-runner
      containers:
      - name: gitlab-gitlab-runner
        image: gitlab/gitlab-runner:alpine-v12.9.0
        imagePullPolicy: "IfNotPresent"
        command: ["/bin/bash", "/scripts/entrypoint"]
        env:
                
        - name: CI_SERVER_URL
          value: http://gitlab-unicorn.gitlab.svc.cluster.local:8181
        - name: CLONE_URL
          value: ""
        - name: RUNNER_REQUEST_CONCURRENCY
          value: "1"
        - name: RUNNER_EXECUTOR
          value: "kubernetes"
        - name: REGISTER_LOCKED
          value: "false"
        - name: RUNNER_TAG_LIST
          value: ""
        - name: RUNNER_OUTPUT_LIMIT
          value: "4096"
        - name: KUBERNETES_IMAGE
          value: "ubuntu:16.04"
        
        - name: KUBERNETES_NAMESPACE
          value: "gitlab"
        - name: KUBERNETES_POLL_TIMEOUT
          value: "180"
        - name: KUBERNETES_CPU_LIMIT
          value: ""
        - name: KUBERNETES_MEMORY_LIMIT
          value: ""
        - name: KUBERNETES_CPU_REQUEST
          value: ""
        - name: KUBERNETES_MEMORY_REQUEST
          value: ""
        - name: KUBERNETES_SERVICE_ACCOUNT
          value: ""
        - name: KUBERNETES_SERVICE_CPU_LIMIT
          value: ""
        - name: KUBERNETES_SERVICE_MEMORY_LIMIT
          value: ""
        - name: KUBERNETES_SERVICE_CPU_REQUEST
          value: ""
        - name: KUBERNETES_SERVICE_MEMORY_REQUEST
          value: ""
        - name: KUBERNETES_HELPER_CPU_LIMIT
          value: ""
        - name: KUBERNETES_HELPER_MEMORY_LIMIT
          value: ""
        - name: KUBERNETES_HELPER_CPU_REQUEST
          value: ""
        - name: KUBERNETES_HELPER_MEMORY_REQUEST
          value: ""
        - name: KUBERNETES_HELPER_IMAGE
          value: ""
        - name: KUBERNETES_PULL_POLICY
          value: ""
        - name: CACHE_TYPE
          value: "s3"
        - name: CACHE_PATH
          value: "gitlab-runner"
        - name: CACHE_SHARED
          value: "true"
        - name: CACHE_S3_SERVER_ADDRESS
          value: "minio.gitlab.dev-gitlab2.fences-bootstrap.p1.dev"
        - name: CACHE_S3_BUCKET_NAME
          value: "runner-cache"
        - name: CACHE_S3_BUCKET_LOCATION
          value: "us-east-1"
        livenessProbe:
          exec:
            command: ["/bin/bash", "/scripts/check-live"]
          initialDelaySeconds: 60
          timeoutSeconds: 1
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          exec:
            command: ["/usr/bin/pgrep","gitlab.*runner"]
          initialDelaySeconds: 10
          timeoutSeconds: 1
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        ports:
        - name: metrics
          containerPort: 9252
        volumeMounts:
        - name: runner-secrets
          mountPath: /secrets
        - name: etc-gitlab-runner
          mountPath: /home/gitlab-runner/.gitlab-runner
        - name: scripts
          mountPath: /scripts
        resources:
          {}
      volumes:
      - name: runner-secrets
        emptyDir:
          medium: "Memory"
      - name: etc-gitlab-runner
        emptyDir:
          medium: "Memory"
      - name: init-runner-secrets
        projected:
          sources:
            - secret:
                name: "gitlab-minio-secret"
            - secret:
                name: "gitlab-gitlab-runner-secret"
                items:
                  - key: runner-registration-token
                    path: runner-registration-token
                  - key: runner-token
                    path: runner-token
      - name: scripts
        configMap:
          name: gitlab-gitlab-runner
---
# Source: gitlab/charts/gitlab/charts/gitlab-exporter/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gitlab-gitlab-exporter
  namespace: gitlab
  labels:
    app: gitlab-exporter
    chart: gitlab-exporter-3.2.2
    release: gitlab
    heritage: Helm
    
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gitlab-exporter
      release: gitlab
  template:
    metadata:
      labels:
        app: gitlab-exporter
        release: gitlab
      annotations:
        checksum/config: 0678409da75538200d0a49657cfe83c126fd642bc1c31f39e8c87ef1d58ca250
        prometheus.io/path: /metrics
        prometheus.io/port: "9168"
        prometheus.io/scrape: "true"
    spec:
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchLabels:
                  app: gitlab-exporter
                  release: gitlab
      initContainers:
        
        
        - name: certificates
          image: "registry.gitlab.com/gitlab-org/build/cng/alpine-certificates:20171114-r3"
          imagePullPolicy: "Always"
          volumeMounts:
          - name: etc-ssl-certs
            mountPath: /etc/ssl/certs
            readOnly: false
          - name: custom-ca-certificates
            mountPath: /usr/local/share/ca-certificates
            readOnly: true
          resources:
            requests:
              cpu: 50m
        - name: configure
          command: ['sh', '/config/configure']
          image: "busybox:latest"
          volumeMounts:
          
          
          - name: gitlab-exporter-config
            mountPath: /config
            readOnly: true
          - name: init-gitlab-exporter-secrets
            mountPath: /init-config
            readOnly: true
          - name: gitlab-exporter-secrets
            mountPath: /init-secrets
            readOnly: false
          resources:
            requests:
              cpu: 50m
      
      containers:
        
        - name: gitlab-exporter
          image: "registry.gitlab.com/gitlab-org/build/cng/gitlab-exporter:6.1.0"
          imagePullPolicy: "Always"
          env:
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: '/var/opt/gitlab-exporter/templates'
            - name: CONFIG_DIRECTORY
              value: '/etc/gitlab-exporter'
          ports:
          - containerPort: 9168
            name: gitlab-exporter
          volumeMounts:
            - name: gitlab-exporter-config
              mountPath: /var/opt/gitlab-exporter/templates/gitlab-exporter.yml.erb
              subPath: gitlab-exporter.yml.erb
            - name: gitlab-exporter-secrets
              mountPath: '/etc/gitlab'
              readOnly: true
            
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs/
              readOnly: true
          livenessProbe:
            exec:
              command:
                - pgrep
                - -f
                - gitlab-exporter
          readinessProbe:
            exec:
              command:
                - pgrep
                - -f
                - gitlab-exporter
          lifecycle:
            preStop:
              exec:
                command: ["/bin/bash", "-c", "pkill -f 'gitlab-exporter'"]
          resources:
            requests:
              cpu: 75m
              memory: 100M
      volumes:
      
      
      - name: gitlab-exporter-config
        configMap:
          name: gitlab-gitlab-exporter
      - name: init-gitlab-exporter-secrets
        projected:
          defaultMode: 0400
          sources:
          - secret:
              name: "gitlab-postgresql-password"
              items:
                - key: "postgresql-password"
                  path: postgres/psql-password
          - secret:
              name: "gitlab-redis-secret"
              items:
                - key: "secret"
                  path: redis/password
      - name: gitlab-exporter-secrets
        emptyDir:
          medium: "Memory"
      
      - name: etc-ssl-certs
        emptyDir:
          medium: "Memory"
      - name: custom-ca-certificates
        projected:
          defaultMode: 0400
          sources:
          - secret:
              name: gitlab-wildcard-tls-ca
---
# Source: gitlab/charts/gitlab/charts/sidekiq/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gitlab-sidekiq-all-in-1-v1
  namespace: gitlab
  labels:
    app: sidekiq
    chart: sidekiq-3.2.2
    release: gitlab
    heritage: Helm
    
    queue-pod-name: all-in-1
spec:
  selector:
    matchLabels:
      app: sidekiq
      release: gitlab
      queue-pod-name: all-in-1
  template:
    metadata:
      labels:
        app: sidekiq
        release: gitlab
        queue-pod-name: all-in-1
      annotations:
        checksum/configmap: e37b985cef0777ddaf5d4d287b078fe424b34066cca575c2a9a0f29bc9c08a6d
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        checksum/configmap-pod: 681c665cd325c04a4a4c86aa0294792c4ec5279298c137f368dc0e28df34afb5
        prometheus.io/port: "3807"
        prometheus.io/scrape: "true"
    spec:
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchLabels:
                  app: sidekiq
                  release: gitlab
      initContainers:
        
        
        - name: certificates
          image: "registry.gitlab.com/gitlab-org/build/cng/alpine-certificates:20171114-r3"
          imagePullPolicy: "Always"
          volumeMounts:
          - name: etc-ssl-certs
            mountPath: /etc/ssl/certs
            readOnly: false
          - name: custom-ca-certificates
            mountPath: /usr/local/share/ca-certificates
            readOnly: true
          resources:
            requests:
              cpu: 50m
        - name: configure
          command: ['sh', '/config/configure']
          image: "busybox:latest"
          volumeMounts:
          
          
          
          - name: sidekiq-config
            mountPath: /config
            readOnly: true
          - name: init-sidekiq-secrets
            mountPath: /init-config
            readOnly: true
          - name: sidekiq-secrets
            mountPath: /init-secrets
            readOnly: false
          resources:
            requests:
              cpu: 50m
        - name: dependencies
          image: "registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ce:v12.9.2"
          imagePullPolicy: "Always"
          args:
            - /scripts/wait-for-deps
          env:
            - name: GITALY_FEATURE_DEFAULT_ON
              value: "1"
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: '/var/opt/gitlab/templates'
            - name: CONFIG_DIRECTORY
              value: '/srv/gitlab/config'
            - name: SIDEKIQ_CONCURRENCY
              value: "25"
            - name: SIDEKIQ_TIMEOUT
              value: "5"
            - name: ENABLE_BOOTSNAP
              value: "1"
          volumeMounts:
          
          - name: sidekiq-config
            mountPath: '/var/opt/gitlab/templates'
            readOnly: true
          - name: sidekiq-secrets
            mountPath: '/etc/gitlab'
            readOnly: true
          - name: sidekiq-secrets
            mountPath: /srv/gitlab/config/secrets.yml
            subPath: rails-secrets/secrets.yml
            readOnly: true
          resources:
            requests:
              cpu: 50m      
      containers:
        
        - name: sidekiq
          image: "registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ce:v12.9.2"
          imagePullPolicy: "Always"
          env:
            - name: prometheus_multiproc_dir
              value: /metrics
            - name: GITALY_FEATURE_DEFAULT_ON
              value: "1"
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: '/var/opt/gitlab/templates'
            - name: CONFIG_DIRECTORY
              value: '/srv/gitlab/config'
            - name: SIDEKIQ_CONCURRENCY
              value: "25"
            - name: SIDEKIQ_TIMEOUT
              value: "5"
            - name: SIDEKIQ_DAEMON_MEMORY_KILLER
              value: "0"
            - name: SIDEKIQ_MEMORY_KILLER_CHECK_INTERVAL
              value: "3"
            - name: SIDEKIQ_MEMORY_KILLER_MAX_RSS
              value: "2000000"
            - name: SIDEKIQ_MEMORY_KILLER_GRACE_TIME
              value: "900"
            - name: SIDEKIQ_MEMORY_KILLER_SHUTDOWN_WAIT
              value: "30"
            - name: ENABLE_BOOTSNAP
              value: "1"
          ports:
          - containerPort: 3807
            name: metrics
          volumeMounts:
          
          - name: sidekiq-metrics
            mountPath: '/metrics'
          - name: sidekiq-config
            mountPath: '/var/opt/gitlab/templates'
            readOnly: true
          - name: sidekiq-secrets
            mountPath: '/etc/gitlab'
            readOnly: true
          - name: sidekiq-secrets
            mountPath: /srv/gitlab/config/secrets.yml
            subPath: rails-secrets/secrets.yml
          - name: sidekiq-config
            mountPath: '/srv/gitlab/config/initializers/smtp_settings.rb'
            subPath: smtp_settings.rb
          - name: sidekiq-config
            mountPath: '/srv/gitlab/INSTALLATION_TYPE'
            subPath: installation_type
          - name: etc-ssl-certs
            mountPath: /etc/ssl/certs/
            readOnly: true
          livenessProbe:
            httpGet:
              path: /liveness
              port: 3807
            initialDelaySeconds: 20
            periodSeconds: 60
            timeoutSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /readiness
              port: 3807
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 3
          lifecycle:
            preStop:
              exec:
                command: ["/bin/bash", "-c", "pkill -f 'sidekiq'"]
          resources:
            requests:
              cpu: 50m
              memory: 650M
      volumes:
      
      
      
      - name: sidekiq-metrics
        emptyDir:
          medium: "Memory"
      - name: sidekiq-config
        projected:
          sources:
            - configMap:
                name: gitlab-sidekiq
            - configMap:
                name: gitlab-sidekiq-all-in-1
      - name: init-sidekiq-secrets
        projected:
          defaultMode: 0400
          sources:
          - secret:
              name: "gitlab-rails-secret"
              items:
                - key: secrets.yml
                  path: rails-secrets/secrets.yml
          - secret:
              name: "gitlab-gitaly-secret"
              items:
                - key: "token"
                  path: gitaly/gitaly_token
          - secret:
              name: "gitlab-redis-secret"
              items:
                - key: "secret"
                  path: redis/password
          - secret:
              name: "gitlab-postgresql-password"
              items:
                - key: "postgresql-password"
                  path: postgres/psql-password
          - secret:
              name: "gitlab-registry-secret"
              items:
                - key: registry-auth.key
                  path: registry/gitlab-registry.key
          # mount secret for minio
          - secret:
              name: "gitlab-minio-secret"
              items:
                - key: accesskey
                  path: minio/accesskey
                - key: secretkey
                  path: minio/secretkey
          # mount secret for lfs
          # mount secret for artifacts
          # mount secret for uploads
          # mount secret for packages
          # mount secret for external_diffs
          # mount secret for pseudonymizer
          # mount secrets for LDAP
          
      - name: sidekiq-secrets
        emptyDir:
          medium: "Memory"
      
      - name: etc-ssl-certs
        emptyDir:
          medium: "Memory"
      - name: custom-ca-certificates
        projected:
          defaultMode: 0400
          sources:
          - secret:
              name: gitlab-wildcard-tls-ca
---
# Source: gitlab/charts/gitlab/charts/task-runner/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gitlab-task-runner
  namespace: gitlab
  labels:
    app: task-runner
    chart: task-runner-3.2.2
    release: gitlab
    heritage: Helm
    
spec:
  replicas: 1
  strategy:
    rollingUpdate: null
    type: Recreate
  selector:
    matchLabels:
      app: task-runner
      release: gitlab
  template:
    metadata:
      labels:
        app: task-runner
        release: gitlab
      annotations:
        checksum/config: 3b962d65b14cad29ee68f849f690540f39f9667aa50e9236900dec1a3efabead
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    spec:
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      initContainers:
        
        
        - name: certificates
          image: "registry.gitlab.com/gitlab-org/build/cng/alpine-certificates:20171114-r3"
          imagePullPolicy: "Always"
          volumeMounts:
          - name: etc-ssl-certs
            mountPath: /etc/ssl/certs
            readOnly: false
          - name: custom-ca-certificates
            mountPath: /usr/local/share/ca-certificates
            readOnly: true
          resources:
            requests:
              cpu: 50m
        - name: configure
          command: ['sh', '/config/configure']
          image: "busybox:latest"
          volumeMounts:
          
          
          
          - name: task-runner-config
            mountPath: /config
            readOnly: true
          - name: init-task-runner-secrets
            mountPath: /init-config
            readOnly: true
          - name: task-runner-secrets
            mountPath: /init-secrets
            readOnly: false
          resources:
            requests:
              cpu: 50m      
      containers:
        
        - name: task-runner
          args:
            - /bin/bash
            - -c
            - cp -v -r -L /etc/gitlab/.s3cfg $HOME/.s3cfg && while sleep 3600; do :; done # alpine sleep has no infinity
          image: "registry.gitlab.com/gitlab-org/build/cng/gitlab-task-runner-ce:v12.9.2"
          imagePullPolicy: "Always"
          env:
            - name: ARTIFACTS_BUCKET_NAME
              value: gitlab-artifacts
            - name: REGISTRY_BUCKET_NAME
              value: registry
            - name: LFS_BUCKET_NAME
              value: git-lfs
            - name: UPLOADS_BUCKET_NAME
              value: gitlab-uploads
            - name: PACKAGES_BUCKET_NAME
              value: gitlab-packages
            - name: BACKUP_BUCKET_NAME
              value: gitlab-backups
            - name: BACKUP_BACKEND
              value: s3
            - name: TMP_BUCKET_NAME
              value: tmp
            - name: GITALY_FEATURE_DEFAULT_ON
              value: "1"
            - name: ENABLE_BOOTSNAP
              value: "1"
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: '/var/opt/gitlab/templates'
            - name: CONFIG_DIRECTORY
              value: '/srv/gitlab/config'
          volumeMounts:
            
            - name: task-runner-config
              mountPath: '/var/opt/gitlab/templates'
            - name: task-runner-config
              mountPath: '/srv/gitlab/config/initializers/smtp_settings.rb'
              subPath: smtp_settings.rb
            - name: task-runner-secrets
              mountPath: '/etc/gitlab'
              readOnly: true
            - name: task-runner-secrets
              mountPath: /srv/gitlab/config/secrets.yml
              subPath: rails-secrets/secrets.yml
            - name: task-runner-tmp
              mountPath: '/srv/gitlab/tmp'
              readOnly: false
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs/
              readOnly: true
          resources:
            requests:
              cpu: 50m
              memory: 350M
      volumes:
      
      
      
      - name: task-runner-config
        projected:
          sources:
            - configMap:
                name: gitlab-task-runner
      - name: task-runner-tmp
        emptyDir: {}
      - name: init-task-runner-secrets
        projected:
          defaultMode: 0400
          sources:
          - secret:
              name: "gitlab-rails-secret"
              items:
                - key: secrets.yml
                  path: rails-secrets/secrets.yml
          - secret:
              name: "gitlab-gitlab-shell-secret"
              items:
                - key: "secret"
                  path: shell/.gitlab_shell_secret
          - secret:
              name: "gitlab-gitaly-secret"
              items:
                - key: "token"
                  path: gitaly/gitaly_token
          - secret:
              name: "gitlab-redis-secret"
              items:
                - key: "secret"
                  path: redis/password
          - secret:
              name: "gitlab-postgresql-password"
              items:
                - key: "postgresql-password"
                  path: postgres/psql-password
          - secret:
              name: "gitlab-registry-secret"
              items:
                - key: registry-auth.key
                  path: registry/gitlab-registry.key
          # mount secret for minio
          - secret:
              name: "gitlab-minio-secret"
              items:
                - key: accesskey
                  path: minio/accesskey
                - key: secretkey
                  path: minio/secretkey
          # mount secret for artifacts
          # mount secret for lfs
          # mount secret for uploads
          # mount secret for packages
          # mount secret for external_diffs
          # mount secret for pseudonymizer
          # mount secrets for LDAP
          
      - name: task-runner-secrets
        emptyDir:
          medium: "Memory"
      
      - name: etc-ssl-certs
        emptyDir:
          medium: "Memory"
      - name: custom-ca-certificates
        projected:
          defaultMode: 0400
          sources:
          - secret:
              name: gitlab-wildcard-tls-ca
---
# Source: gitlab/charts/gitlab/charts/unicorn/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gitlab-unicorn
  namespace: gitlab
  labels:
    app: unicorn
    chart: unicorn-3.2.2
    release: gitlab
    heritage: Helm
    
spec:
  replicas: 
  selector:
    matchLabels:
      app: unicorn
      release: gitlab
  template:
    metadata:
      labels:
        app: unicorn
        release: gitlab
      annotations:
        checksum/config: 51e3652dd09b6c11e39e9b59b781b0b86b36e993f3c5a6e0fe9a31b5144b5d05
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        prometheus.io/path: /-/metrics
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
    spec:
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchLabels:
                  app: unicorn
                  release: gitlab
      initContainers:
        
        
        - name: certificates
          image: "registry.gitlab.com/gitlab-org/build/cng/alpine-certificates:20171114-r3"
          imagePullPolicy: "Always"
          volumeMounts:
          - name: etc-ssl-certs
            mountPath: /etc/ssl/certs
            readOnly: false
          - name: custom-ca-certificates
            mountPath: /usr/local/share/ca-certificates
            readOnly: true
          resources:
            requests:
              cpu: 50m
        - name: configure
          command: ['sh']
          args: [ '-c', 'sh -x /config-unicorn/configure ; sh -x /config-workhorse/configure ; mkdir -p -m 3770 /tmp/gitlab']
          image: "busybox:latest"
          volumeMounts:
          
          
          
          - name: unicorn-config
            mountPath: /config-unicorn
            readOnly: true
          - name: workhorse-config
            mountPath: /config-workhorse
            readOnly: true
          - name: init-unicorn-secrets
            mountPath: /init-config
            readOnly: true
          - name: unicorn-secrets
            mountPath: /init-secrets
            readOnly: false
          - name: workhorse-secrets
            mountPath: /init-secrets-workhorse
            readOnly: false
          - name: shared-tmp
            mountPath: /tmp
            readOnly: false
          resources:
            requests:
              cpu: 50m
        - name: dependencies
          image: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ce:v12.9.2
          imagePullPolicy: "Always"
          args:
            - /scripts/wait-for-deps
          env:
            - name: GITALY_FEATURE_DEFAULT_ON
              value: "1"
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: '/var/opt/gitlab/templates'
            - name: CONFIG_DIRECTORY
              value: '/srv/gitlab/config'
            - name: WORKHORSE_ARCHIVE_CACHE_DISABLED
              value: "1"
            - name: ENABLE_BOOTSNAP
              value: "1"
          volumeMounts:
            
            - name: unicorn-config
              mountPath: '/var/opt/gitlab/templates'
            - name: unicorn-secrets
              mountPath: '/etc/gitlab'
              readOnly: true
            - name: unicorn-secrets
              mountPath: /srv/gitlab/config/secrets.yml
              subPath: rails-secrets/secrets.yml
              readOnly: true
          resources:
            requests:
              cpu: 50m      
      containers:
        
        - name: unicorn
          image: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ce:v12.9.2
          imagePullPolicy: "Always"
          ports:
            - containerPort: 8080
              name: unicorn
          env:
            - name: GITLAB_WEBSERVER
              value: unicorn
            - name: TMPDIR
              value: "/tmp/gitlab"
            - name: GITALY_FEATURE_DEFAULT_ON
              value: "1"
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: '/var/opt/gitlab/templates'
            - name: CONFIG_DIRECTORY
              value: '/srv/gitlab/config'
            - name: prometheus_multiproc_dir
              value: /metrics
            - name: ENABLE_BOOTSNAP
              value: "1"
          volumeMounts:
            - name: unicorn-metrics
              mountPath: '/metrics'
            - name: unicorn-config
              mountPath: '/var/opt/gitlab/templates'
            - name: unicorn-secrets
              mountPath: '/etc/gitlab'
              readOnly: true
            - name: unicorn-secrets
              mountPath: /srv/gitlab/config/secrets.yml
              subPath: rails-secrets/secrets.yml
            - name: unicorn-config
              mountPath: '/srv/gitlab/config/initializers/smtp_settings.rb'
              subPath: smtp_settings.rb
            - name: unicorn-config
              mountPath: '/srv/gitlab/INSTALLATION_TYPE'
              subPath: installation_type
            - name: shared-upload-directory
              mountPath: /srv/gitlab/public/uploads/tmp
              readOnly: false
            - name: shared-artifact-directory
              mountPath: /srv/gitlab/shared
              readOnly: false
            - name: shared-tmp
              mountPath: '/tmp'
              readOnly: false
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs/
              readOnly: true
            
          livenessProbe:
            httpGet:
              path: /-/liveness
              port: 8080
            initialDelaySeconds: 20
            periodSeconds: 60
            timeoutSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /-/readiness
              port: 8080
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 3
          lifecycle:
            preStop:
              exec:
                command: ["/bin/bash", "-c", "pkill -SIGQUIT -f 'unicorn master'"]
          resources:
            requests:
              cpu: 300m
              memory: 1.5G
        - name: gitlab-workhorse
          image: "registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ce:v12.9.2"
          imagePullPolicy: "Always"
          ports:
            - containerPort: 8181
              name: workhorse
          env:
            - name: TMPDIR
              value: "/tmp/gitlab"
            - name: GITLAB_WORKHORSE_EXTRA_ARGS
              value: ""
            - name: GITLAB_WORKHORSE_LISTEN_PORT
              value: "8181"
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: '/var/opt/gitlab/templates'
            - name: CONFIG_DIRECTORY
              value: '/srv/gitlab/config'
          volumeMounts:
            - name: workhorse-config
              mountPath: '/var/opt/gitlab/templates'
            - name: workhorse-secrets
              mountPath: '/etc/gitlab'
              readOnly: true
            - name: shared-upload-directory
              mountPath: /srv/gitlab/public/uploads/tmp
              readOnly: false
            - name: shared-artifact-directory
              mountPath: /srv/gitlab/shared
              readOnly: false
            - name: shared-tmp
              mountPath: '/tmp'
              readOnly: false
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs/
              readOnly: true
            
          livenessProbe:
            exec:
              command:
              - /scripts/healthcheck
            initialDelaySeconds: 20
            periodSeconds: 60
            timeoutSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
              - /scripts/healthcheck
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 3
          resources:
            requests:
              cpu: 100m
              memory: 100M
      volumes:
      
      
      
      - name: shared-tmp
        emptyDir: {}
      - name: unicorn-metrics
        emptyDir:
          medium: "Memory"
      - name: unicorn-config
        configMap:
          name: gitlab-unicorn
      - name: workhorse-config
        configMap:
            name: gitlab-workhorse-config
      - name: init-unicorn-secrets
        projected:
          defaultMode: 0400
          sources:
          - secret:
              name: "gitlab-rails-secret"
              items:
                - key: secrets.yml
                  path: rails-secrets/secrets.yml
          - secret:
              name: "gitlab-gitlab-shell-secret"
              items:
                - key: "secret"
                  path: shell/.gitlab_shell_secret
          - secret:
              name: "gitlab-gitaly-secret"
              items:
                - key: "token"
                  path: gitaly/gitaly_token
          - secret:
              name: "gitlab-redis-secret"
              items:
                - key: "secret"
                  path: redis/password
          - secret:
              name: "gitlab-postgresql-password"
              items:
                - key: "postgresql-password"
                  path: postgres/psql-password
          - secret:
              name: "gitlab-registry-secret"
              items:
                - key: registry-auth.key
                  path: registry/gitlab-registry.key
          - secret:
              name: "gitlab-gitlab-workhorse-secret"
              items:
                - key: "shared_secret"
                  path: gitlab-workhorse/secret
          # mount secret for minio
          - secret:
              name: "gitlab-minio-secret"
              items:
                - key: accesskey
                  path: minio/accesskey
                - key: secretkey
                  path: minio/secretkey
          # mount secret for artifacts
          # mount secret for lfs
          # mount secret for uploads
          # mount secret for packages
          # mount secret for external_diffs
          # mount secrets for LDAP
          
      - name: unicorn-secrets
        emptyDir:
          medium: "Memory"
      - name: workhorse-secrets
        emptyDir:
          medium: "Memory"
      - name: shared-upload-directory
        emptyDir: {}
      - name: shared-artifact-directory
        emptyDir: {}
      
      - name: etc-ssl-certs
        emptyDir:
          medium: "Memory"
      - name: custom-ca-certificates
        projected:
          defaultMode: 0400
          sources:
          - secret:
              name: gitlab-wildcard-tls-ca
---
# Source: gitlab/charts/minio/templates/minio_deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gitlab-minio
  namespace: gitlab
  labels:
    app: minio
    chart: minio-0.4.3
    release: gitlab
    heritage: Helm
    
spec:
  strategy:
    type: Recreate
    # The following entry allows updates without intervention, due to previous defaults.
    rollingUpdate: null
  selector:
    matchLabels:
      app: minio
      release: "gitlab"
      component: app
  template:
    metadata:
      name: gitlab-minio
      labels:
        app: minio
        chart: "minio-0.4.3"
        release: "gitlab"
        heritage: "Helm"
        component: app
    spec:
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      volumes:
        - name: podinfo
          downwardAPI:
            items:
              - path: "labels"
                fieldRef:
                  fieldPath: metadata.labels
        - name: export
          persistentVolumeClaim:
            claimName: gitlab-minio
        - name: minio-configuration
          projected:
            sources:
            - configMap:
                name: gitlab-minio-config-cm
            - secret:
                name: "gitlab-minio-secret"
        - name: minio-server-config
          emptyDir:
            medium: "Memory"
      initContainers:
        - name: configure
          image: "busybox:latest"
          imagePullPolicy: IfNotPresent
          command: ["sh", "/config/configure"]
          volumeMounts:
            - name: minio-configuration
              mountPath: /config
            - name: minio-server-config
              mountPath: /minio
          resources:
            requests:
              cpu: 50m      
      containers:
        - name: minio
          image: minio/minio:RELEASE.2017-12-28T01-21-00Z
          imagePullPolicy: Always
          args: ["-C", "/tmp/.minio", "--quiet", "server", "/export"]
          volumeMounts:
            - name: export
              mountPath: /export
            - name: minio-server-config
              # this path altered from upstream, for use with `securityContext`/UID 1000
              mountPath: "/tmp/.minio"
            - name: podinfo
              mountPath: /podinfo
              readOnly: false
          ports:
            - name: service
              containerPort: 9000
          livenessProbe:
            tcpSocket:
              port: 9000
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
---
# Source: gitlab/charts/gitlab/charts/sidekiq/templates/hpa.yaml
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: gitlab-sidekiq-all-in-1-v1
  namespace: gitlab
  labels:
    app: sidekiq
    chart: sidekiq-3.2.2
    release: gitlab
    heritage: Helm
    
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: gitlab-sidekiq-all-in-1-v1
  minReplicas: 1
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      targetAverageValue: 350m
---
# Source: gitlab/charts/gitlab/charts/unicorn/templates/hpa.yaml
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: gitlab-unicorn
  namespace: gitlab
  labels:
    app: unicorn
    chart: unicorn-3.2.2
    release: gitlab
    heritage: Helm
    
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: gitlab-unicorn
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      targetAverageValue: 500m
---
# Source: gitlab/charts/gitlab/charts/gitaly/templates/statefulset.yml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: gitlab-gitaly
  namespace: gitlab
  labels:
    app: gitaly
    chart: gitaly
    release: gitlab
    heritage: Helm
    
spec:
  selector:
    matchLabels:
      app: gitaly
      release: gitlab
  serviceName: gitlab-gitaly
  replicas:  1
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        app: gitaly
        release: gitlab
      annotations:
        checksum/config: 51bbc865325b49488ad2f414601d797121a3e170383b5e320128c1d803132301
    spec:
      terminationGracePeriodSeconds: 30
      initContainers:
        
        
        - name: certificates
          image: "registry.gitlab.com/gitlab-org/build/cng/alpine-certificates:20171114-r3"
          imagePullPolicy: "Always"
          volumeMounts:
          - name: etc-ssl-certs
            mountPath: /etc/ssl/certs
            readOnly: false
          - name: custom-ca-certificates
            mountPath: /usr/local/share/ca-certificates
            readOnly: true
          resources:
            requests:
              cpu: 50m
        - name: configure
          command: ['sh', '/config/configure']
          image: "busybox:latest"
          volumeMounts:
          
          - name: gitaly-config
            mountPath: /config
            readOnly: true
          - name: init-gitaly-secrets
            mountPath: /init-config
            readOnly: true
          - name: gitaly-secrets
            mountPath: /init-secrets
            readOnly: false
          resources:
            requests:
              cpu: 50m
      securityContext:
        runAsUser: 1000
        fsGroup: 1000      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchLabels:
                  app: gitaly
                  release: gitlab
      containers:
        
        - name: gitaly
          image: "registry.gitlab.com/gitlab-org/build/cng/gitaly:v12.9.2"
          imagePullPolicy: "Always"
          ports:
            - containerPort: 8075
            - containerPort: 9236
          env:
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: '/etc/gitaly/templates'
            - name: CONFIG_DIRECTORY
              value: '/etc/gitaly'
            - name: GITALY_CONFIG_FILE
              value: '/etc/gitaly/config.toml'
            - name: SSL_CERT_DIR
              value: '/etc/ssl/certs'
            - name: GITALY_PROMETHEUS_LISTEN_ADDR
              value: ':9236'
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          volumeMounts:
            
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs/
              readOnly: true
            - name: gitaly-config
              mountPath: '/etc/gitaly/templates'
            - name: gitaly-secrets
              mountPath: '/etc/gitlab-secrets'
              readOnly: true
            - name: repo-data
              mountPath: '/home/git/repositories'
          livenessProbe:
            exec:
              command:
              - /scripts/healthcheck
            initialDelaySeconds: 30
            timeoutSeconds: 3
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
              - /scripts/healthcheck
            initialDelaySeconds: 10
            timeoutSeconds: 3
            periodSeconds: 10
          resources:
            requests:
              cpu: 100m
              memory: 200Mi
      volumes:
      
      - name: gitaly-config
        configMap:
          name: gitlab-gitaly
      - name: gitaly-secrets
        emptyDir:
          medium: "Memory"
      - name: init-gitaly-secrets
        projected:
          defaultMode: 0440
          sources:
          - secret:
              name: "gitlab-gitaly-secret"
              items:
                - key: "token"
                  path: "gitaly_token"
          - secret:
              name: "gitlab-gitlab-shell-secret"
              items:
                - key: "secret"
                  path: ".gitlab_shell_secret"
          - secret:
              name: "gitlab-redis-secret"
              items:
                - key: "secret"
                  path: redis_password
      
      - name: etc-ssl-certs
        emptyDir:
          medium: "Memory"
      - name: custom-ca-certificates
        projected:
          defaultMode: 0400
          sources:
          - secret:
              name: gitlab-wildcard-tls-ca
  volumeClaimTemplates:
    - metadata:
        name: repo-data
        labels:
          app: gitaly
          release: gitlab
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "50Gi"
        selector:
---
# Source: gitlab/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: gitlab-postgresql
  labels:
    app: postgresql
    chart: postgresql-7.7.3
    release: "gitlab"
    heritage: "Helm"
spec:
  serviceName: gitlab-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: postgresql
      release: "gitlab"
      role: master
  template:
    metadata:
      name: gitlab-postgresql
      labels:
        app: postgresql
        chart: postgresql-7.7.3
        release: "gitlab"
        heritage: "Helm"
        role: master
    spec:      
      securityContext:
        fsGroup: 1001
      initContainers:
        - name: init-chmod-data
          image: docker.io/bitnami/minideb:stretch
          imagePullPolicy: "Always"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          command:
            - /bin/sh
            - -c
            - |
              mkdir -p /bitnami/postgresql/data
              chmod 700 /bitnami/postgresql/data
              find /bitnami/postgresql -mindepth 0 -maxdepth 1 -not -name ".snapshot" -not -name "lost+found" | \
                xargs chown -R 1001:1001
              chmod -R 777 /dev/shm
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: data
              mountPath: /bitnami/postgresql
              subPath: 
            - name: dshm
              mountPath: /dev/shm
      containers:
        - name: gitlab-postgresql
          image: docker.io/bitnami/postgresql:10.9.0
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_POSTGRES_PASSWORD_FILE
              value: "/opt/bitnami/postgresql/secrets/postgresql-postgres-password"
            - name: POSTGRES_USER
              value: "gitlab"
            - name: POSTGRES_PASSWORD_FILE
              value: "/opt/bitnami/postgresql/secrets/postgresql-password"
            - name: POSTGRES_DB
              value: "gitlabhq_production"
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
          ports:
            - name: postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "gitlab" -d "gitlabhq_production" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  pg_isready -U "gitlab" -d "gitlabhq_production" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: custom-init-scripts
              mountPath: /docker-entrypoint-initdb.d/
            - name: postgresql-password
              mountPath: /opt/bitnami/postgresql/secrets/
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath: 
        - name: metrics
          image: docker.io/bitnami/postgres-exporter:0.7.0-debian-9-r12
          imagePullPolicy: "IfNotPresent"
          env:
            - name: DATA_SOURCE_URI
              value: "127.0.0.1:5432/gitlabhq_production?sslmode=disable"
            - name: DATA_SOURCE_PASS_FILE
              value: "/opt/bitnami/postgresql/secrets/postgresql-password"
            - name: DATA_SOURCE_USER
              value: gitlab
          livenessProbe:
            httpGet:
              path: /
              port: metrics
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            httpGet:
              path: /
              port: metrics
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: postgresql-password
              mountPath: /opt/bitnami/postgresql/secrets/
          ports:
            - name: metrics
              containerPort: 9187
      volumes:
        - name: postgresql-password
          secret:
            secretName: "gitlab-postgresql-password"
        - name: custom-init-scripts
          configMap:
            name: gitlab-postgresql-init-db
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: 1Gi
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: gitlab/charts/redis/templates/redis-master-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: gitlab-redis-master
  labels:
    app: redis
    chart: redis-10.3.4
    release: gitlab
    heritage: Helm
spec:
  selector:
    matchLabels:
      app: redis
      release: gitlab
      role: master
  serviceName: gitlab-redis-headless
  template:
    metadata:
      labels:
        app: redis
        chart: redis-10.3.4
        release: gitlab
        role: master
      annotations:
        checksum/health: 215dfd97143cfd419d64704134a329fd0d2a3ec5e52706acef643ea51288ddef
        checksum/configmap: 6f1a2a4be44b21e52e6a1ffc0c2d158e470024c340801e7402a8d71de5dd152e
        checksum/secret: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        prometheus.io/port: "9121"
        prometheus.io/scrape: "true"
    spec:      
      securityContext:
        fsGroup: 1001
      serviceAccountName: "default"
      containers:
      - name: gitlab-redis
        image: "docker.io/bitnami/redis:5.0.7-debian-9-r50"
        imagePullPolicy: "IfNotPresent"
        securityContext:
          runAsUser: 1001
        command:
        - /bin/bash
        - -c
        - |
          if [[ -n $REDIS_PASSWORD_FILE ]]; then
            password_aux=`cat ${REDIS_PASSWORD_FILE}`
            export REDIS_PASSWORD=$password_aux
          fi
          if [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then
            cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
          fi
          if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
            cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
          fi
          ARGS=("--port" "${REDIS_PORT}")
          ARGS+=("--requirepass" "${REDIS_PASSWORD}")
          ARGS+=("--masterauth" "${REDIS_PASSWORD}")
          ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
          ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
          /run.sh ${ARGS[@]}
        env:
        - name: REDIS_REPLICATION_MODE
          value: master
        - name: REDIS_PASSWORD_FILE
          value: "/opt/bitnami/redis/secrets/redis-password"
        - name: REDIS_PORT
          value: "6379"
        ports:
        - name: redis
          containerPort: 6379
        livenessProbe:
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
          exec:
            command:
            - sh
            - -c
            - /health/ping_liveness_local.sh 5
        readinessProbe:
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 5
          exec:
            command:
            - sh
            - -c
            - /health/ping_readiness_local.sh 5
        resources:
          null
        volumeMounts:
        - name: health
          mountPath: /health
        - name: redis-password
          mountPath: /opt/bitnami/redis/secrets/
        - name: redis-data
          mountPath: /data
          subPath: 
        - name: config
          mountPath: /opt/bitnami/redis/mounted-etc
        - name: redis-tmp-conf
          mountPath: /opt/bitnami/redis/etc/
      - name: metrics
        image: docker.io/bitnami/redis-exporter:1.3.5-debian-9-r23
        imagePullPolicy: "IfNotPresent"
        command:
        - /bin/bash
        - -c
        - |
          if [[ -f '/secrets/redis-password' ]]; then
           export REDIS_PASSWORD=$(cat /secrets/redis-password)
          fi
          redis_exporter
        env:
        - name: REDIS_ALIAS
          value: gitlab-redis
        volumeMounts:
        - name: redis-password
          mountPath: /secrets/
        ports:
        - name: metrics
          containerPort: 9121
        resources:
          null
      volumes:
      - name: health
        configMap:
          name: gitlab-redis-health
          defaultMode: 0755
      - name: redis-password
        secret:
          secretName: "gitlab-redis-secret"
          items:
          - key: "secret"
            path: redis-password
      - name: config
        configMap:
          name: gitlab-redis
      - name: redis-tmp-conf
        emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app: redis
          release: gitlab
          heritage: Helm
          component: master
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
        
  updateStrategy:
    type: RollingUpdate
---
# Source: gitlab/charts/gitlab/charts/migrations/templates/job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: gitlab-migrations.1
  namespace: gitlab
  labels:
    app: migrations
    chart: migrations-3.2.2
    release: gitlab
    heritage: Helm
    
spec:
  activeDeadlineSeconds: 3600
  backoffLimit: 6
  template:
    metadata:
      labels:
        app: migrations
        release: gitlab
    spec:
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      initContainers:
        
        
        - name: certificates
          image: "registry.gitlab.com/gitlab-org/build/cng/alpine-certificates:20171114-r3"
          imagePullPolicy: "Always"
          volumeMounts:
          - name: etc-ssl-certs
            mountPath: /etc/ssl/certs
            readOnly: false
          - name: custom-ca-certificates
            mountPath: /usr/local/share/ca-certificates
            readOnly: true
          resources:
            requests:
              cpu: 50m
        - name: configure
          command: ['sh', '/config/configure']
          image: "busybox:latest"
          volumeMounts:
          
          
          
          - name: migrations-config
            mountPath: /config
            readOnly: true
          - name: init-migrations-secrets
            mountPath: /init-config
            readOnly: true
          - name: migrations-secrets
            mountPath: /init-secrets
            readOnly: false
          resources:
            requests:
              cpu: 50m
      restartPolicy: OnFailure      
      containers:
        
        - name: migrations
          image: "registry.gitlab.com/gitlab-org/build/cng/gitlab-task-runner-ce:v12.9.2"
          args:
            - /scripts/wait-for-deps
            - /scripts/db-migrate
          imagePullPolicy: "Always"
          env:
            - name: GITLAB_SHARED_RUNNERS_REGISTRATION_TOKEN
              valueFrom:
                secretKeyRef:
                  name: "gitlab-gitlab-runner-secret"
                  key: runner-registration-token
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: '/var/opt/gitlab/templates'
            - name: CONFIG_DIRECTORY
              value: '/srv/gitlab/config'
            - name: BYPASS_SCHEMA_VERSION
              value: 'true'
            - name: ENABLE_BOOTSNAP
              value: '1'
          volumeMounts:
            - name: migrations-config
              mountPath: '/var/opt/gitlab/templates'
            - name: migrations-secrets
              mountPath: '/etc/gitlab'
              readOnly: true
            - name: migrations-secrets
              mountPath: /srv/gitlab/config/secrets.yml
              subPath: rails-secrets/secrets.yml
            - name: migrations-secrets
              mountPath: /srv/gitlab/config/initial_root_password
              subPath: migrations/initial_root_password
            
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs/
              readOnly: true
          resources:
            requests:
              cpu: 250m
              memory: 200Mi
      volumes:
      
      
      
      - name: migrations-config
        configMap:
          name: gitlab-migrations
      - name: init-migrations-secrets
        projected:
          defaultMode: 0400
          sources:
          - secret:
              name: "gitlab-rails-secret"
              items:
                - key: secrets.yml
                  path: rails-secrets/secrets.yml
          - secret:
              name: "gitlab-gitaly-secret"
              items:
                - key: "token"
                  path: gitaly/gitaly_token
          - secret:
              name: "gitlab-redis-secret"
              items:
                - key: "secret"
                  path: redis/password
          - secret:
              name: "gitlab-postgresql-password"
              items:
                - key: "postgresql-password"
                  path: postgres/psql-password
          - secret:
              name: "gitlab-gitlab-initial-root-password"
              items:
                - key: "password"
                  path: migrations/initial_root_password
      - name: migrations-secrets
        emptyDir:
          medium: "Memory"
      
      - name: etc-ssl-certs
        emptyDir:
          medium: "Memory"
      - name: custom-ca-certificates
        projected:
          defaultMode: 0400
          sources:
          - secret:
              name: gitlab-wildcard-tls-ca
---
# Source: gitlab/charts/minio/templates/create-buckets-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: gitlab-minio-create-buckets.1
  namespace: gitlab
  labels:
    app: minio
    chart: minio-0.4.3
    release: gitlab
    heritage: Helm
    
spec:
  activeDeadlineSeconds: 600
  template:
    metadata:
      labels:
        app: minio
        release: gitlab
        component: create-buckets
    spec:
      restartPolicy: OnFailure
      volumes:
        - name: minio-configuration
          projected:
            sources:
            - configMap:
                name: gitlab-minio-config-cm
            - secret:
                name: "gitlab-minio-secret"      
      containers:
      - name: minio-mc
        image: minio/mc:RELEASE.2018-07-13T00-53-22Z
        command: ["/bin/sh", "/config/initialize"]
        env:
          - name: MINIO_ENDPOINT
            value: gitlab-minio-svc
          - name: MINIO_PORT
            value: "9000"
        volumeMounts:
          - name: minio-configuration
            mountPath: /config
        resources:
          requests:
            cpu: 50m
---
# Source: gitlab/charts/shared-secrets/templates/rbac-config.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: gitlab-shared-secrets
  namespace: gitlab
  labels:
    app: shared-secrets
    chart: shared-secrets-0.1.0
    release: gitlab
    heritage: Helm
    
  annotations:
---
# Source: gitlab/charts/shared-secrets/templates/rbac-config.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gitlab-shared-secrets
  namespace: gitlab
  labels:
    app: shared-secrets
    chart: shared-secrets-0.1.0
    release: gitlab
    heritage: Helm
  annotations:
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "create", "patch"]
---
# Source: gitlab/charts/shared-secrets/templates/rbac-config.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: gitlab-shared-secrets
  namespace: gitlab
  labels:
    app: shared-secrets
    chart: shared-secrets-0.1.0
    release: gitlab
    heritage: Helm
  annotations:
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: gitlab-shared-secrets
subjects:
  - kind: ServiceAccount
    name: gitlab-shared-secrets
    namespace: gitlab
---
# Source: gitlab/charts/shared-secrets/templates/self-signed-cert-job.yml
apiVersion: batch/v1
kind: Job
metadata:
  name: gitlab-shared-secrets.1-aj8-selfsign
  namespace: gitlab
  labels:
    app: shared-secrets
    chart: shared-secrets-0.1.0
    release: gitlab
    heritage: Helm
    
  annotations:
spec:
  template:
    metadata:
      labels:
        app: shared-secrets
        release: gitlab
    spec:
      securityContext:
        runAsUser: 65534
        fsGroup: 65534
      serviceAccountName: gitlab-shared-secrets
      restartPolicy: Never
      
      initContainers:
      - name: cfssl-self-sign
        image: "registry.gitlab.com/gitlab-org/build/cng/cfssl-self-sign:1.2"
        env:
        - name: CA_SUBJECT
          value: "GitLab Helm Chart" # defaults to GitLab in container
        - name: CA_ORG
          value: "gitlab" # defaults to GitLab in container
        - name: CA_ORG_UNIT
          value: "gitlab" # defaults to Cloud Native in container
        - name: CERT_SUBJECT
          value: "gitlab.dev-gitlab2.fences-bootstrap.p1.dev" # defaults to GitLab in container
        - name: CERT_DOMAIN
          value: "gitlab.dev-gitlab2.fences-bootstrap.p1.dev" # defaults to example.com in container
        - name: EXPIRY
          value: "365d" # defaults to 8076h in container
        - name: ALGORITHM
          value: "rsa" # defaults to ecdsa in container
        - name: KEY_SIZE
          value: "4096" # defaults to 256 inside container
        volumeMounts:
        - name: certs-path
          mountPath: /output
        resources:
          requests:
            cpu: 50m
      containers:
      - name: kubectl
        image: "registry.gitlab.com/gitlab-org/build/cng/kubectl:1.13.12"
        command:
        - /bin/bash
        - -exc
        - |
          certname=gitlab-wildcard-tls
          # create wildcard certificate secret
          kubectl create secret tls $certname \
            --cert=/output/wildcard.pem --key=/output/wildcard-key.pem || true
          kubectl --namespace=$namespace label \
            secret $certname  $(echo 'app.kubernetes.io/name=gitlab' | sed -E 's/=[^ ]*/-/g')
          kubectl --namespace=$namespace label --overwrite \
            secret $certname app=shared-secrets chart=shared-secrets-0.1.0 release=gitlab heritage=Helm 
          # create CA certificate secret
          kubectl create secret generic ${certname}-ca \
            --from-file=cfssl_ca=/output/ca.pem || true
          kubectl --namespace=$namespace label \
            secret ${certname}-ca  $(echo 'app.kubernetes.io/name=gitlab' | sed -E 's/=[^ ]*/-/g')
          kubectl --namespace=$namespace label --overwrite \
            secret ${certname}-ca app=shared-secrets chart=shared-secrets-0.1.0 release=gitlab heritage=Helm 
        volumeMounts:
        - name: certs-path
          mountPath: /output
        resources:
          requests:
            cpu: 50m
      volumes:
      - name: certs-path
        emptyDir: {}
---
# Source: gitlab/charts/shared-secrets/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-shared-secrets
  namespace: gitlab
  labels:
    app: shared-secrets
    chart: shared-secrets-0.1.0
    release: gitlab
    heritage: Helm
    
  annotations:
data:
  generate-secrets: |
    namespace=gitlab
    release=gitlab
    env=production
    
    pushd $(mktemp -d)
    
    # Args pattern, length
    function gen_random(){
      head -c 4096 /dev/urandom | LC_CTYPE=C tr -cd $1 | head -c $2
    }
    
    # Args: yaml file, search path
    function fetch_rails_value(){
      local value=$(yq read $1 "${2}")
      # Don't return null values
      if [ "${value}" != "null" ]; then echo "${value}"; fi
    }
    
    # Args: secretname
    function label_secret(){
      local secret_name=$1
    # Remove application labels if they exist
      kubectl --namespace=$namespace label \
        secret $secret_name $(echo 'app.kubernetes.io/name=gitlab' | sed -E 's/=[^ ]*/-/g')
    
      kubectl --namespace=$namespace label \
        --overwrite \
        secret $secret_name app=shared-secrets chart=shared-secrets-0.1.0 release=gitlab heritage=Helm 
    }
    
    # Args: secretname, args
    function generate_secret_if_needed(){
      local secret_args=( "${@:2}")
      local secret_name=$1
      if ! $(kubectl --namespace=$namespace get secret $secret_name > /dev/null 2>&1); then
        kubectl --namespace=$namespace create secret generic $secret_name ${secret_args[@]}
      else
        echo "secret \"$secret_name\" already exists"
      fi;
      label_secret $secret_name
    }
    
    # Initial root password
    generate_secret_if_needed "gitlab-gitlab-initial-root-password" --from-literal="password"=$(gen_random 'a-zA-Z0-9' 64)
    
    # Redis password
    generate_secret_if_needed "gitlab-redis-secret" --from-literal="secret"=$(gen_random 'a-zA-Z0-9' 64)
    
    
    # Postgres password
    generate_secret_if_needed "gitlab-postgresql-password" --from-literal=postgresql-password=$(gen_random 'a-zA-Z0-9' 64) --from-literal=postgresql-postgres-password=$(gen_random 'a-zA-Z0-9' 64)
    
    
    # Gitlab shell
    generate_secret_if_needed "gitlab-gitlab-shell-secret" --from-literal="secret"=$(gen_random 'a-zA-Z0-9' 64)
    
    # Gitaly secret
    generate_secret_if_needed "gitlab-gitaly-secret" --from-literal="token"=$(gen_random 'a-zA-Z0-9' 64)
    
    # Minio secret
    generate_secret_if_needed "gitlab-minio-secret" --from-literal=accesskey=$(gen_random 'a-zA-Z0-9' 64) --from-literal=secretkey=$(gen_random 'a-zA-Z0-9' 64)
    
    
    # Gitlab runner secret
    generate_secret_if_needed "gitlab-gitlab-runner-secret" --from-literal=runner-registration-token=$(gen_random 'a-zA-Z0-9' 64) --from-literal=runner-token=""
    
    # Registry certificates
    mkdir -p certs
    openssl req -new -newkey rsa:4096 -subj "/CN=gitlab-issuer" -nodes -x509 -keyout certs/registry-example-com.key -out certs/registry-example-com.crt -days 3650
    generate_secret_if_needed "gitlab-registry-secret" --from-file=registry-auth.key=certs/registry-example-com.key --from-file=registry-auth.crt=certs/registry-example-com.crt
    
    # config/secrets.yaml
    if [ -n "$env" ]; then
      rails_secret="gitlab-rails-secret"
    
      # Fetch the values from the existing secret if it exists
      if $(kubectl --namespace=$namespace get secret $rails_secret > /dev/null 2>&1); then
        kubectl --namespace=$namespace get secret $rails_secret -o jsonpath="{.data.secrets\.yml}" | base64 --decode > secrets.yml
        secret_key_base=$(fetch_rails_value secrets.yml "${env}.secret_key_base")
        otp_key_base=$(fetch_rails_value secrets.yml "${env}.otp_key_base")
        db_key_base=$(fetch_rails_value secrets.yml "${env}.db_key_base")
        openid_connect_signing_key=$(fetch_rails_value secrets.yml "${env}.openid_connect_signing_key")
      fi;
    
      # Generate defaults for any unset secrets
      secret_key_base="${secret_key_base:-$(gen_random 'a-f0-9' 128)}" # equavilent to secureRandom.hex(64)
      otp_key_base="${otp_key_base:-$(gen_random 'a-f0-9' 128)}" # equavilent to secureRandom.hex(64)
      db_key_base="${db_key_base:-$(gen_random 'a-f0-9' 128)}" # equavilent to secureRandom.hex(64)
      openid_connect_signing_key="${openid_connect_signing_key:-$(openssl genrsa 2048)}"
    
      # Update the existing secret
      cat << EOF > rails-secrets.yml
    apiVersion: v1
    kind: Secret
    metadata:
      name: $rails_secret
    type: Opaque
    stringData:
      secrets.yml: |-
        $env:
          secret_key_base: $secret_key_base
          otp_key_base: $otp_key_base
          db_key_base: $db_key_base
          openid_connect_signing_key: |
    $(echo "${openid_connect_signing_key}" | awk '{print "        " $0}')
    EOF
      kubectl --validate=false --namespace=$namespace apply -f rails-secrets.yml
      label_secret $rails_secret
    fi
    
    # Shell ssh host keys
    ssh-keygen -A
    mkdir -p host_keys
    cp /etc/ssh/ssh_host_* host_keys/
    generate_secret_if_needed "gitlab-gitlab-shell-host-keys" --from-file host_keys
    
    # Gitlab-workhorse secret
    generate_secret_if_needed "gitlab-gitlab-workhorse-secret" --from-literal="shared_secret"=$(gen_random 'a-zA-Z0-9' 32 | base64)
    
    # Registry http.secret secret
    generate_secret_if_needed "gitlab-registry-httpsecret" --from-literal="secret"=$(gen_random 'a-z0-9' 128 | base64 -w 0)
---
# Source: gitlab/charts/shared-secrets/templates/job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: gitlab-shared-secrets.1-v6n
  namespace: gitlab
  labels:
    app: shared-secrets
    chart: shared-secrets-0.1.0
    release: gitlab
    heritage: Helm
    
  annotations:
spec:
  template:
    metadata:
      labels:
        app: shared-secrets
        release: gitlab
    spec:
      securityContext:
        runAsUser: 65534
        fsGroup: 65534
      serviceAccountName: gitlab-shared-secrets
      restartPolicy: Never
      
      containers:
        - name: shared-secrets
          image: "registry.gitlab.com/gitlab-org/build/cng/kubectl:1.13.12"
          command: ['/bin/bash', '/scripts/generate-secrets']
          imagePullPolicy: "Always"
          volumeMounts:
            - name: scripts
              mountPath: /scripts
            - name: ssh
              mountPath: /etc/ssh
          resources:
            requests:
              cpu: 50m
      volumes:
      - name: scripts
        configMap:
          name: gitlab-shared-secrets
      - name: ssh
        emptyDir: {}
